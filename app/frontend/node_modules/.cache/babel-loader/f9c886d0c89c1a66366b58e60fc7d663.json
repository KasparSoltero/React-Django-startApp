{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Audio.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from 'react';\nimport './Audio.css';\nimport Sound from 'react-sound';\nimport { Spectrogram } from 'react-spectrogram';\nimport axios from 'axios';\nimport ReactAudioPlayer from 'react-audio-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar wavSpectro = require('wav-spectrogram');\n\nconst decode = require('audio-decode');\n\nconst buffer = require('audio-lena/wav'); // Required to allow axios to make post requests to django\n\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\n\nfunction Audio() {\n  _s();\n\n  const [audioFile, setAudioFile] = useState(null);\n  const [audioList, setAudioList] = useState(0);\n  axios.get(\"/api/unprocessedaudios/\").then(res => setAudioList(res)).catch(err => console.log(err));\n\n  function handleInputChange(e) {\n    setAudioFile(e.target.value);\n  }\n\n  function displayAudioSelect() {\n    if (audioList) {\n      return /*#__PURE__*/_jsxDEV(\"select\", {\n        value: audioFile,\n        onChange: handleInputChange,\n        children: audioList.data.map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file.filedata,\n          children: file.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"fetching audio list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n  function displaySpectrogram() {\n    if (audioFile) {\n      var reader = new FileReader();\n      var canvasElem = document.getElementById('spectrogram-canvas');\n      var arrayBuffer = decode(buffer, (err, audioBuffer) => {});\n      wavSpectro.drawSpectrogram({\n        arrayBuffer: arrayBuffer,\n        canvasElem: canvasElem,\n        cmap: 'jet'\n      }, function () {\n        console.log('done');\n      }); // reader.readAsArrayBuffer(audioFile)\n\n      return (\n        /*#__PURE__*/\n        // <audio src={audioFile} controls></audio>\n        _jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      );\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"fetching audio list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 23\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [\"Testing audio / Spectrogram display...\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AudioList\",\n      children: [\"List of 'file' objects in database: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 53\n      }, this), displayAudioSelect()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"uploadbutton\",\n      onClick: () => console.log(audioList.data),\n      children: \"log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-container\",\n      children: [\"Audio display area\", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"spectrogram-canvas\",\n        width: \"200\",\n        height: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), displaySpectrogram()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Audio, \"uBaKIgjGBYSS2LKBYT0Q3tMppsc=\");\n\n_c = Audio;\nexport default Audio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Audio.js"],"names":["React","useEffect","useState","Sound","Spectrogram","axios","ReactAudioPlayer","wavSpectro","require","decode","buffer","defaults","xsrfCookieName","xsrfHeaderName","Audio","audioFile","setAudioFile","audioList","setAudioList","get","then","res","catch","err","console","log","handleInputChange","e","target","value","displayAudioSelect","data","map","file","filedata","title","displaySpectrogram","reader","FileReader","canvasElem","document","getElementById","arrayBuffer","audioBuffer","drawSpectrogram","cmap"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AAEA,MAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;;;AACAH,KAAK,CAACM,QAAN,CAAeC,cAAf,GAAgC,WAAhC;AACAP,KAAK,CAACM,QAAN,CAAeE,cAAf,GAAgC,aAAhC;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8Bd,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAD,CAA1C;AAEAG,EAAAA,KAAK,CACAc,GADL,CACS,yBADT,EAEKC,IAFL,CAEWC,GAAD,IAASH,YAAY,CAACG,GAAD,CAF/B,EAGKC,KAHL,CAGYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHpB;;AAKA,WAASG,iBAAT,CAA2BC,CAA3B,EAA8B;AAC1BX,IAAAA,YAAY,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH;;AAED,WAASC,kBAAT,GAA8B;AAC1B,QAAIb,SAAJ,EAAe;AACX,0BACI;AAAQ,QAAA,KAAK,EAAEF,SAAf;AAA0B,QAAA,QAAQ,EAAEW,iBAApC;AAAA,kBACKT,SAAS,CAACc,IAAV,CAAeC,GAAf,CAAoBC,IAAD,iBAChB;AAAQ,UAAA,KAAK,EAAEA,IAAI,CAACC,QAApB;AAAA,oBAA+BD,IAAI,CAACE;AAApC;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KARD,MAQO,oBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG;AAGV;;AAED,WAASC,kBAAT,GAA8B;AAE1B,QAAIrB,SAAJ,EAAe;AAEX,UAAIsB,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACA,UAAIC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAjB;AAEA,UAAIC,WAAW,GAAGjC,MAAM,CAACC,MAAD,EAAS,CAACa,GAAD,EAAMoB,WAAN,KAAoB,CAAE,CAA/B,CAAxB;AAEApC,MAAAA,UAAU,CAACqC,eAAX,CAA2B;AAACF,QAAAA,WAAW,EAAEA,WAAd;AAA2BH,QAAAA,UAAU,EAAEA,UAAvC;AAAmDM,QAAAA,IAAI,EAAE;AAAzD,OAA3B,EAA4F,YAAY;AACpGrB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACC,OAFL,EAPW,CAWX;;AAEA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAIH,KAjBD,MAiBO,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACV;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,sEAGI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,sEACwC;AAAA;AAAA;AAAA;AAAA,cADxC,EAEKK,kBAAkB,EAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eASI;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAE,MAAIN,OAAO,CAACC,GAAR,CAAYR,SAAS,CAACc,IAAtB,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAWI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,oDAEI;AAAQ,QAAA,EAAE,EAAC,oBAAX;AAAgC,QAAA,KAAK,EAAC,KAAtC;AAA4C,QAAA,MAAM,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKK,kBAAkB,EAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GArEQtB,K;;KAAAA,K;AAuET,eAAeA,KAAf","sourcesContent":["import { React, useEffect, useState } from 'react';\nimport './Audio.css';\nimport Sound from 'react-sound';\nimport { Spectrogram } from 'react-spectrogram';\nimport axios from 'axios';\nimport ReactAudioPlayer from 'react-audio-player'\nvar wavSpectro = require('wav-spectrogram');\n\nconst decode = require('audio-decode');\nconst buffer = require('audio-lena/wav');\n\n// Required to allow axios to make post requests to django\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\"\n\nfunction Audio() {\n\n    const [ audioFile, setAudioFile ] = useState(null);\n    const [audioList, setAudioList] = useState(0);\n\n    axios\n        .get(\"/api/unprocessedaudios/\")\n        .then((res) => setAudioList(res))\n        .catch((err) => console.log(err));\n\n    function handleInputChange(e) {\n        setAudioFile(e.target.value)\n    }\n\n    function displayAudioSelect() {\n        if (audioList) {\n            return (\n                <select value={audioFile} onChange={handleInputChange}>\n                    {audioList.data.map((file)=>(\n                        <option value={file.filedata}>{file.title}</option>\n                    ))}\n                </select>\n            )\n        } else return (\n            <div>fetching audio list...</div>\n        )\n    }\n\n    function displaySpectrogram() {\n\n        if (audioFile) {\n\n            var reader = new FileReader();\n            var canvasElem = document.getElementById('spectrogram-canvas')\n\n            var arrayBuffer = decode(buffer, (err, audioBuffer)=>{});\n\n            wavSpectro.drawSpectrogram({arrayBuffer: arrayBuffer, canvasElem: canvasElem, cmap: 'jet'}, function () {\n                console.log('done');\n                });\n\n            // reader.readAsArrayBuffer(audioFile)\n\n            return (\n                // <audio src={audioFile} controls></audio>\n                <div/>\n            )\n        } else return <div>fetching audio list...</div>\n    }\n\n    return (\n        <div className='container'>\n            Testing audio / Spectrogram display...\n            \n            <div className='AudioList'>\n                List of 'file' objects in database: <br/>\n                {displayAudioSelect()}\n\n            </div>\n\n            <button className='uploadbutton' onClick={()=>console.log(audioList.data)}>log</button>\n\n            <div className='audio-container'>\n                Audio display area\n                <canvas id='spectrogram-canvas' width='200' height='100'></canvas>\n                {displaySpectrogram()}\n            </div>\n        </div>\n    )\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}