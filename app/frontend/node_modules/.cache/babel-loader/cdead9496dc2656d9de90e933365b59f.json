{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'; // import Waveform from 'waveform-react';\n\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Upload_Audio() {\n  _s();\n\n  const [audioFile, setAudioFile] = useState(0);\n  const [audioList, setAudioList] = useState(0);\n  const [output, setOutput] = useState(0);\n  const [audioUrls, setAudioUrls] = useState(0);\n\n  function updateAudioList() {\n    //list of audio files in integer form are retrieved from the database\n    // axios({\n    //     method: 'get',\n    //     url: '/retrieve-audio/',\n    // }).then(\n    //     //returned as a string like: [file_1.wav, [0,1,2,3,4,5,6]][file_2.wav, [7,8,9,10,11,12]]\n    //     (response)=>setAudioList(response.data)\n    // ).catch(\n    //     (err)=>console.log(err))\n    axios.get('api/unprocessedaudios/').then(res => setAudioUrls(res.data)).catch(err => console.log(err));\n    {\n      displayAudioList();\n    }\n  }\n\n  function displayAudioList() {\n    if (audioUrls) {\n      // var listAudio = []\n      // var temp = audioList.slice(1, audioList.length-1).split('][')\n      // temp.forEach(element => listAudio.push(element.split(\"', \")))\n      // // signal is sent by database as a string, have to change it to a JS array\n      // for (var i=0; i < listAudio.length; i++) {\n      //     var intArray = listAudio[i][1]\n      //         .slice(1, listAudio[i][1].length-1)\n      //         .split(',')\n      //         .map(item => parseInt(item));\n      //     listAudio[i][1] = intArray\n      // }\n      // console.log(listAudio)\n      var wavesurfer = Wavesurfer.create({\n        container: '#waveform2',\n        interact: true,\n        mediaControls: true\n      });\n      console.log(audioUrls);\n      audioUrls.forEach(audioUrl => console.log(audioUrl['filedata']));\n      wavesurfer.load(audioUrls[0]['filedata']);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"AudioList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  function processNewAudios() {//Process unprocessed audio files\n  }\n\n  function addFilesToObjects() {\n    //Send group of files to backend, which then uploads them one by one\n    var uploadData = document.getElementById('uploadFiles').files;\n    var numFiles = uploadData['length'];\n\n    for (let i = 0; i < numFiles; i++) {\n      const formdata = new FormData();\n      formdata.append('title', uploadData[i].name);\n      formdata.append('file', uploadData[i]);\n      axios({\n        method: 'post',\n        url: '/uploadfiles/',\n        data: formdata\n      }).then(response => setOutput(response.data));\n    }\n  }\n\n  function updateAudioList() {\n    axios.get(\"/api/unprocessedaudios/\").then(res => setAudioList(res)).catch(err => console.log(err));\n  }\n\n  function displayAudioSelect() {\n    if (audioList) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-select\",\n        children: audioList.data.map(function (audio) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            id: audio.id,\n            class: \"audio-select-file\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"test\",\n              className: \"select-audio-title\",\n              children: audio.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"fetching audio list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-box\",\n    children: [\"....testing file upload! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-audio-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateAudioList(),\n        children: \". Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => processNewAudios(),\n        children: \". Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), displayAudioSelect()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"uploadFiles\",\n      type: \"file\",\n      id: \"uploadFiles\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"uploadbutton\",\n      onClick: () => addFilesToObjects(),\n      children: \"Upload files to database!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Upload_Audio, \"iqVQNwRP1E0MCXk/hj4OyH0kBVw=\");\n\n_c = Upload_Audio;\nexport default Upload_Audio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload_Audio\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js"],"names":["React","useState","axios","Waveform","Wavesurfer","Upload_Audio","audioFile","setAudioFile","audioList","setAudioList","output","setOutput","audioUrls","setAudioUrls","updateAudioList","get","then","res","data","catch","err","console","log","displayAudioList","wavesurfer","create","container","interact","mediaControls","forEach","audioUrl","load","processNewAudios","addFilesToObjects","uploadData","document","getElementById","files","numFiles","i","formdata","FormData","append","name","method","url","response","displayAudioSelect","map","audio","id","title"],"mappings":"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","sourcesContent":["import { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'\n\n// import Waveform from 'waveform-react';\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js'\n\nfunction Upload_Audio() {\n\n    const [audioFile, setAudioFile] = useState(0);\n    const [audioList, setAudioList] = useState(0);\n    const [ output, setOutput ] = useState(0);\n\n    const [ audioUrls, setAudioUrls ] = useState(0);\n\n    function updateAudioList() {\n        //list of audio files in integer form are retrieved from the database\n\n        // axios({\n        //     method: 'get',\n        //     url: '/retrieve-audio/',\n        // }).then(\n        //     //returned as a string like: [file_1.wav, [0,1,2,3,4,5,6]][file_2.wav, [7,8,9,10,11,12]]\n        //     (response)=>setAudioList(response.data)\n        // ).catch(\n        //     (err)=>console.log(err))\n\n        axios\n            .get('api/unprocessedaudios/')\n            .then((res)=>setAudioUrls(res.data))\n            .catch((err)=>console.log(err))\n        \n        {displayAudioList()}\n\n    }\n\n    function displayAudioList() {\n\n        if (audioUrls) {\n            \n            // var listAudio = []\n\n            // var temp = audioList.slice(1, audioList.length-1).split('][')\n            // temp.forEach(element => listAudio.push(element.split(\"', \")))\n            \n            // // signal is sent by database as a string, have to change it to a JS array\n            // for (var i=0; i < listAudio.length; i++) {\n\n            //     var intArray = listAudio[i][1]\n            //         .slice(1, listAudio[i][1].length-1)\n            //         .split(',')\n            //         .map(item => parseInt(item));\n                \n            //     listAudio[i][1] = intArray\n            // }\n            // console.log(listAudio)\n\n            var wavesurfer = Wavesurfer.create({\n                container: '#waveform2',\n                interact: true,\n                mediaControls: true\n                \n            })\n\n            console.log(audioUrls)\n            audioUrls.forEach((audioUrl)=>console.log(audioUrl['filedata']))\n            wavesurfer.load(audioUrls[0]['filedata'])\n\n            return (\n                <div className='AudioList'>\n                    \n                </div>\n            )\n        }        \n    }\n\n    function processNewAudios() {\n        //Process unprocessed audio files\n\n        \n    }\n\n\n    function addFilesToObjects() {\n        //Send group of files to backend, which then uploads them one by one\n\n        var uploadData = document.getElementById('uploadFiles').files\n        var numFiles = uploadData['length'];\n\n\n        for (let i = 0; i<numFiles; i++) {\n            const formdata = new FormData();\n            formdata.append('title', uploadData[i].name)\n            formdata.append('file', uploadData[i]);\n            axios({\n                method: 'post',\n                url: '/uploadfiles/',\n                data: formdata,\n            }).then(\n                (response) => setOutput(response.data))\n        }\n\n    }\n\n\n    function updateAudioList() {\n        axios\n        .get(\"/api/unprocessedaudios/\")\n        .then((res) => setAudioList(res))\n        .catch((err) => console.log(err));\n    }\n\n\n    function displayAudioSelect() {\n        if (audioList) {\n            return (\n                <div className='audio-select'>\n                    {audioList.data.map(function(audio) {\n                        return (\n                            <li id={audio.id}\n                                class='audio-select-file'\n                                >\n                                <div id='test' className='select-audio-title'>\n                                    {audio.title}\n                                </div>\n                            </li>\n                        )\n                    })}\n                </div>\n            )\n        } else return (\n            <div>fetching audio list...</div>\n        )\n    }\n\n\n    return (\n        <div className='main-box'>\n            ....testing file upload! <br/>\n            \n            <div className='select-audio-container'>\n                <button onClick={()=>updateAudioList()}>. Refresh</button>\n                <button onClick={()=>processNewAudios()}>. Process</button>\n\n                {displayAudioSelect()}\n            </div>            \n\n            <input name='uploadFiles' type='file' id='uploadFiles' multiple/>\n            <button className='uploadbutton' onClick={() => addFilesToObjects()}>\n                Upload files to database!\n            </button>\n\n        </div>\n    )\n}\n\nexport default Upload_Audio;"]},"metadata":{},"sourceType":"module"}