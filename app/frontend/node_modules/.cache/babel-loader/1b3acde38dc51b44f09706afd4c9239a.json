{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/ObjectDataPanel.js\",\n    _s = $RefreshSig$();\n\nimport './ObjectDataPanel.css';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport getCSRF from './getCSRF.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\nfunction ObjectDataPanel(props) {\n  _s();\n\n  //display mutable and/or immutable data about an object\n  //object - object to display data for\n  //mutable: true/false - should object values be alterable?\n  //keys - which keys of object to display, if left blank all keys are displayed\n  //style_options - custom css styles passed to data panel\n  const [field_types, setFieldTypes] = useState(null);\n  useEffect(() => {\n    //get types of *mutable* fields\n    let form = new FormData();\n    form.append('model', 'audioclip');\n    form.append('fields', props.keys);\n    axios({\n      method: 'post',\n      url: 'get-field-types/',\n      data: form\n    }).then(function (response) {\n      setFieldTypes(response.data);\n    });\n  });\n\n  function onButtonPress(e) {\n    let field_key = e.target.id.split('-')[0];\n    let new_value = document.getElementById(field_key).value;\n    let form = new FormData();\n    form.append('model', 'audioclip');\n    form.append('id', props.object.id);\n    form.append('field_key', field_key);\n    form.append('new_value', new_value);\n    axios({\n      method: 'post',\n      url: 'update-object/',\n      data: form\n    }).then(function (response) {\n      console.log(response);\n    });\n  }\n\n  function displayParameter(key) {\n    if (field_types) {\n      let field_type = field_types[props.keys.indexOf(key)];\n\n      if (['BooleanField', 'CharField'].includes(field_type)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"boolean or char\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this);\n      } else if (field_type === 'DecimalField') {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: field_type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      } else if (field_type === 'ForeignKey') {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"foreign !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this);\n      } else return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"unknown field type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 27\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        id: key,\n        className: \"data-panel-value\",\n        type: \"text\",\n        defaultValue: String(props.object[key])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"object-data-panel\",\n    style: props.style_options ? { ...props.style_options\n    } : null,\n    children: Object.keys(props.object).map(function (key) {\n      if (!props.keys || props.keys.includes(key)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-panel-property\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-panel-key\",\n            children: key + ': '\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), displayParameter(key), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: key + '-button',\n            className: \"data-panel-update-button\",\n            type: \"button\",\n            onClick: onButtonPress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ObjectDataPanel, \"7Hw7BghEXAF3qz1NPTITjOUocOw=\");\n\n_c = ObjectDataPanel;\nexport default ObjectDataPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ObjectDataPanel\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/ObjectDataPanel.js"],"names":["useEffect","useState","axios","getCSRF","defaults","headers","common","ObjectDataPanel","props","field_types","setFieldTypes","form","FormData","append","keys","method","url","data","then","response","onButtonPress","e","field_key","target","id","split","new_value","document","getElementById","value","object","console","log","displayParameter","key","field_type","indexOf","includes","String","style_options","Object","map"],"mappings":"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","sourcesContent":["import './ObjectDataPanel.css'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport getCSRF from './getCSRF.js'\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\nfunction ObjectDataPanel(props) {\n    //display mutable and/or immutable data about an object\n\n    //object - object to display data for\n    //mutable: true/false - should object values be alterable?\n    //keys - which keys of object to display, if left blank all keys are displayed\n    //style_options - custom css styles passed to data panel\n\n    const [ field_types, setFieldTypes ] = useState(null)\n\n    useEffect(() => {\n        //get types of *mutable* fields\n        let form = new FormData\n        form.append('model', 'audioclip')\n        form.append('fields', props.keys)\n        axios({\n            method: 'post',\n            url: 'get-field-types/',\n            data: form\n        }).then(function(response) {\n            setFieldTypes(response.data)\n        })\n    })\n\n\n    function onButtonPress(e) {\n        let field_key = e.target.id.split('-')[0]\n        let new_value = document.getElementById(field_key).value\n\n        let form = new FormData\n        form.append('model', 'audioclip')\n        form.append('id', props.object.id)\n        form.append('field_key', field_key)\n        form.append('new_value', new_value)\n\n        axios({\n            method: 'post',\n            url: 'update-object/',\n            data: form\n        }).then(function(response) {\n            console.log(response)\n        })\n    }\n\n    function displayParameter(key) {\n        \n        if (field_types) {\n\n            let field_type = field_types[props.keys.indexOf(key)]\n            if (['BooleanField', 'CharField'].includes(field_type)) {\n                return (\n                    <div>\n                        boolean or char\n                    </div>\n                )\n            } else if (field_type==='DecimalField') {\n                return (\n                    <div>\n                        {field_type}\n                    </div>\n                )\n            } else if (field_type==='ForeignKey') {\n                return (\n                    <div>\n                        foreign !\n                    </div>\n                )\n            } else return <div>unknown field type</div>\n\n        } else {\n\n            return (\n                <input \n                    id={key}\n                    className='data-panel-value'\n                    type='text'\n                    defaultValue={String(props.object[key])}\n                />\n            )\n        }\n    }\n\n    return (\n        <div className='object-data-panel'style={props.style_options? {...props.style_options} : null}>\n\n            {Object.keys(props.object).map(function(key) {\n\n                if (!props.keys || props.keys.includes(key)) {\n                    return (\n                        <div className='data-panel-property' key={key}>\n\n                            <div className='data-panel-key'>\n                                {key + ': '}\n                            </div>\n                            {displayParameter(key)}\n                            <button id={key+'-button'} className='data-panel-update-button' type='button' onClick={onButtonPress}/>\n    \n                        </div>\n                    )\n                }\n            })}\n        </div>\n    )\n}\n\nexport default ObjectDataPanel"]},"metadata":{},"sourceType":"module"}