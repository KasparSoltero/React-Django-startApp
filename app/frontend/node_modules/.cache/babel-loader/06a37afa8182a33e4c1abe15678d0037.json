{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'; // import Waveform from 'waveform-react';\n\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js';\nimport SelectionList from './SelectionList.js';\nimport getCSRF from './getCSRF.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\nfunction Upload_Audio() {\n  _s();\n\n  const [audioList, setAudioList] = useState(0);\n\n  function denoiseNewAudios() {\n    //Denoise unprocessed audio files\n    if (audioList) {\n      audioList.data.map(function (audio) {\n        console.log(audio);\n\n        if (!audio.denoisedFile) {\n          console.log('here');\n          const formdata = new FormData();\n          formdata.append('id', audio.id);\n          axios({\n            method: 'post',\n            url: '/add-denoised/',\n            data: formdata\n          }).then(response => console.log(response));\n        } else console.log('already processed');\n      });\n    }\n  }\n\n  function convolveNewAudios() {\n    //Convolve unprocessed audio files\n    //get all audio files\n    let form = new FormData();\n    form.append('object', 'AudioFile');\n    form.append('return', 'list');\n    form.append('add_related_models', 'audioclip');\n    axios({\n      method: 'post',\n      url: 'get-model/',\n      data: form\n    }).then(response => {\n      let audio_files = response.data[0];\n      let related_audioclips = response.data[1];\n\n      for (let i = 0; i < audio_files.length; i++) {\n        if (related_audioclips[i] === 'audio.audioclip.None') {\n          console.log(i);\n        }\n      } ////check if each one has been convolved\n      //convolve if not\n\n    });\n\n    if (audioList) {\n      audioList.data.map(function (audio) {\n        console.log('convolving audio file:');\n        console.log(audio); // if (!audio.convolveFile) {\n        //     console.log('here')\n\n        const formdata = new FormData();\n        formdata.append('id', audio.id);\n        axios({\n          method: 'post',\n          url: '/convolve-audio/',\n          data: formdata\n        }).then(response => console.log(response)); // } else console.log('already processed')\n      });\n    }\n  }\n\n  function uploadFilesToDB() {\n    //Send group of files to backend, which then uploads them one by one\n    var uploadData = document.getElementById('uploadFiles').files;\n    var numFiles = uploadData['length'];\n\n    for (let i = 0; i < numFiles; i++) {\n      const formdata = new FormData();\n      formdata.append('title', uploadData[i].name);\n      formdata.append('file', uploadData[i]);\n      axios({\n        method: 'post',\n        url: '/uploadfiles/',\n        data: formdata\n      }).then(response => console.log(response));\n    }\n  }\n\n  function uploadFilesasrefTemp() {\n    var uploadData = document.getElementById('uploadFiles').files;\n    var numFiles = uploadData['length'];\n\n    for (let i = 0; i < numFiles; i++) {\n      const formdata = new FormData();\n      formdata.append('title', uploadData[i].name);\n      formdata.append('file', uploadData[i]);\n      axios({\n        method: 'post',\n        url: '/add-reference-temp/',\n        data: formdata\n      }).then(response => console.log(response));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"process-audios-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"process-audios-button\",\n        onClick: () => denoiseNewAudios(),\n        children: \"Denoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"process-audios-button\",\n        onClick: () => convolveNewAudios(),\n        children: \"Convolve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SelectionList, {\n      list_type: \"backend-data\",\n      object: ['AudioFile', 'AudioClip'],\n      selectable: false // updateSelected={}\n      // display_audio={true}\n      ,\n      display_title: true,\n      style_options: {\n        width: '40%',\n        position: 'absolute',\n        right: '0',\n        top: '40px',\n        bottom: '0px',\n        height: '85%'\n      },\n      display_data: {\n        bool: [{\n          data: 'denoised_filedata',\n          title: 'Denoised'\n        }, {\n          data: 'audioclip_set',\n          title: 'tomato',\n          colors: ['rgb(100,0,200)', 'rgb(0,200,100)']\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"uploadFiles\",\n      type: \"file\",\n      id: \"uploadFiles\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"uploadbutton\",\n      onClick: () => uploadFilesToDB(),\n      children: \"Upload files to database!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"uploadbutton\",\n      onClick: () => uploadFilesasrefTemp(),\n      children: \"Upload files as reference clips!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Upload_Audio, \"kT0OMqnpQhUg3pb3a+q7xMmls/A=\");\n\n_c = Upload_Audio;\nexport default Upload_Audio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload_Audio\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js"],"names":["React","useState","axios","Waveform","Wavesurfer","SelectionList","getCSRF","defaults","headers","common","Upload_Audio","audioList","setAudioList","denoiseNewAudios","data","map","audio","console","log","denoisedFile","formdata","FormData","append","id","method","url","then","response","convolveNewAudios","form","audio_files","related_audioclips","i","length","uploadFilesToDB","uploadData","document","getElementById","files","numFiles","name","uploadFilesasrefTemp","width","position","right","top","bottom","height","bool","title","colors"],"mappings":"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","sourcesContent":["import { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'\n\n// import Waveform from 'waveform-react';\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js'\n\nimport SelectionList from './SelectionList.js'\n\nimport getCSRF from './getCSRF.js'\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\n\nfunction Upload_Audio() {\n\n    const [audioList, setAudioList] = useState(0);\n\n    function denoiseNewAudios() {\n        //Denoise unprocessed audio files\n\n        if (audioList) {\n            audioList.data.map(function(audio) {\n                console.log(audio)\n                if (!audio.denoisedFile) {\n                    console.log('here')\n\n                    const formdata =  new FormData();\n                    formdata.append('id', audio.id)\n\n                    axios({\n                        method: 'post',\n                        url: '/add-denoised/',\n                        data: formdata\n                    }).then((response) => console.log(response))\n\n                } else console.log('already processed')\n            })\n        }\n    }\n\n\n    function convolveNewAudios() {\n        //Convolve unprocessed audio files\n\n        //get all audio files\n        let form = (new FormData)\n        form.append('object', 'AudioFile')\n        form.append('return', 'list')\n        form.append('add_related_models', 'audioclip')\n\n        axios({\n            method: 'post',\n            url: 'get-model/',\n            data: form\n        }).then((response) => {\n            let audio_files = response.data[0]\n            let related_audioclips = response.data[1]\n            for (let i=0; i<audio_files.length; i++) {\n                if (related_audioclips[i] === 'audio.audioclip.None') {\n                    console.log(i)\n                }\n            }\n            ////check if each one has been convolved\n            //convolve if not\n        })\n\n        if (audioList) {\n            audioList.data.map(function(audio) {\n                console.log('convolving audio file:')\n                console.log(audio)\n                // if (!audio.convolveFile) {\n                //     console.log('here')\n\n                const formdata =  new FormData();\n                formdata.append('id', audio.id)\n\n                axios({\n                    method: 'post',\n                    url: '/convolve-audio/',\n                    data: formdata\n                }).then((response) => console.log(response))\n\n                // } else console.log('already processed')\n            })\n        }\n    }\n\n\n    function uploadFilesToDB() {\n        //Send group of files to backend, which then uploads them one by one\n\n        var uploadData = document.getElementById('uploadFiles').files\n        var numFiles = uploadData['length'];\n\n\n        for (let i = 0; i<numFiles; i++) {\n            const formdata = new FormData();\n            formdata.append('title', uploadData[i].name)\n            formdata.append('file', uploadData[i]);\n            axios({\n                method: 'post',\n                url: '/uploadfiles/',\n                data: formdata,\n            }).then(\n                (response) => console.log(response))\n        }\n\n    }\n\n\n    function uploadFilesasrefTemp() {\n        var uploadData = document.getElementById('uploadFiles').files\n        var numFiles = uploadData['length'];\n\n\n        for (let i = 0; i<numFiles; i++) {\n            const formdata = new FormData();\n            formdata.append('title', uploadData[i].name)\n            formdata.append('file', uploadData[i]);\n            axios({\n                method: 'post',\n                url: '/add-reference-temp/',\n                data: formdata,\n            }).then(\n                (response) => console.log(response))\n        }\n    }\n\n\n    return (\n        <div className='main-box'>\n\n            <div className='process-audios-container'>\n                <button className='process-audios-button' onClick={()=>denoiseNewAudios()}>Denoise</button>\n                <button className='process-audios-button' onClick={()=>convolveNewAudios()}>Convolve</button>\n            </div>\n\n            <SelectionList \n                list_type='backend-data' \n                object={['AudioFile', 'AudioClip']}\n                selectable={false}\n                // updateSelected={}\n                // display_audio={true}\n                display_title={true}\n                style_options={{\n                    width: '40%',\n                    position: 'absolute',\n                    right: '0',\n                    top: '40px',\n                    bottom: '0px',\n                    height: '85%',\n                }}\n                display_data={{\n                    bool: [{\n                        data: 'denoised_filedata',\n                        title: 'Denoised',\n                    }, {\n                        data: 'audioclip_set',\n                        title: 'tomato',\n                        colors: ['rgb(100,0,200)','rgb(0,200,100)']\n                    }],\n                }}\n            />\n            \n            <input name='uploadFiles' type='file' id='uploadFiles' multiple/>\n            <button className='uploadbutton' onClick={() => uploadFilesToDB()}>\n                Upload files to database!\n            </button>\n            <button className='uploadbutton' onClick={() => uploadFilesasrefTemp()}>\n                Upload files as reference clips!\n            </button>\n\n        </div>\n    )\n}\n\nexport default Upload_Audio;"]},"metadata":{},"sourceType":"module"}