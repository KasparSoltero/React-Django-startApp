{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/SelectionList.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport './SelectionList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = 'gPvOPnEwl4K7jFnYGucAwkW06M5RrJFRvEtwPMUNbylfnVsG0BOm5niJPd3COr9r';\n\nfunction SelectionList(props) {\n  _s();\n\n  //general selection list\n  //props:\n  //list_type: backend-data\n  //object - the name of the object in backend to list\n  //display_title\n  //display_audio\n  //selectable - are list items selectable?\n  //updateSelected - function to which selected item is passed\n  //style_options - passed to css style of the list container\n  const [list, setList] = useState(null);\n  const [is_table, setIsTable] = useState(null);\n  useEffect(() => {\n    if (props.list_type === 'backend-data') {\n      let list_objects;\n\n      if (typeof props.object === 'object' && props.object.length > 1) {\n        //if multiple objects are provided, list will provide a table\n        setIsTable(true);\n        list_objects = props.object;\n      } else if (typeof props.object === 'string') {\n        setIsTable(false);\n        list_objects = [props.object];\n      } else {\n        list_objects = props.object;\n        setIsTable(false);\n      }\n\n      console.log(list_objects);\n      let temp = [];\n\n      for (let object of list_objects) {\n        console.log(object);\n        let form = new FormData();\n        form.append('object', object);\n        form.append('return', 'list');\n        axios({\n          method: 'post',\n          url: 'get-model/',\n          data: form\n        }).then(response => {\n          temp.push(response.data);\n          setList(temp);\n        });\n      }\n    }\n  }, [props]);\n\n  function handleItemClick(e) {\n    //send selected item to parent component\n    let pk = e.currentTarget.getAttribute('pk');\n    let selected_db_object = list.find(obj => String(obj.id) === pk);\n    let form = {\n      html_selected: e.currentTarget,\n      object: selected_db_object\n    };\n    props.updateSelected(form); //update visuals to show selected component\n\n    for (let el of document.getElementsByClassName('list-element')) {\n      el === e.currentTarget ? el.className = 'list-element selected' : el.className = 'list-element selectable';\n    }\n  }\n\n  function displayElement(el) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-list-element-container\",\n      children: [props.display_title ? /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"selection-list-title\",\n        children: String(el.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"invisible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 26\n      }, this), props.display_audio ? /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: el.filedata,\n        class: \"selection-list-audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"list-container\",\n    style: props.style_options ? { ...props.style_options\n    } : null,\n    children: list ? list[0].map(function (list_element) {\n      const element_props = {\n        className: 'list-element',\n        pk: list_element.id\n      };\n\n      if (props.selectable) {\n        element_props['onClick'] = e => handleItemClick(e);\n\n        element_props['className'] = 'list-element selectable';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", { ...element_props,\n        children: displayElement(list_element)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this);\n    }) : 'retrieving list...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectionList, \"DqpH7awY9CF9hC984ER0mIXnt04=\");\n\n_c = SelectionList;\nexport default SelectionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionList\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/SelectionList.js"],"names":["axios","useState","useEffect","defaults","headers","common","SelectionList","props","list","setList","is_table","setIsTable","list_type","list_objects","object","length","console","log","temp","form","FormData","append","method","url","data","then","response","push","handleItemClick","e","pk","currentTarget","getAttribute","selected_db_object","find","obj","String","id","html_selected","updateSelected","el","document","getElementsByClassName","className","displayElement","display_title","title","display_audio","filedata","style_options","map","list_element","element_props","selectable"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport './SelectionList.css'\n\n\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = 'gPvOPnEwl4K7jFnYGucAwkW06M5RrJFRvEtwPMUNbylfnVsG0BOm5niJPd3COr9r';\n\n\nfunction SelectionList(props) {\n    //general selection list\n\n    //props:\n    //list_type: backend-data\n        //object - the name of the object in backend to list\n        //display_title\n        //display_audio\n    //selectable - are list items selectable?\n    //updateSelected - function to which selected item is passed\n    //style_options - passed to css style of the list container\n    \n    const [ list, setList ] = useState(null)\n    const [ is_table, setIsTable ] = useState(null)\n\n    useEffect(() => {\n        if (props.list_type==='backend-data') {\n        \n            let list_objects\n            if (typeof(props.object)==='object' && props.object.length > 1) {\n                //if multiple objects are provided, list will provide a table\n                setIsTable(true)\n                list_objects = props.object\n            } else if (typeof(props.object)==='string') {\n                setIsTable(false)\n                list_objects = [props.object]\n            } else {\n                list_objects = props.object\n                setIsTable(false)\n            }\n\n            console.log(list_objects)\n            let temp = []\n\n            for (let object of list_objects) {\n                console.log(object)\n\n                let form = (new FormData)\n                form.append('object', object)\n                form.append('return', 'list')\n\n                axios({\n                    method: 'post',\n                    url: 'get-model/',\n                    data: form\n                }).then((response) => {\n                    temp.push(response.data)\n                    setList(temp)\n                })\n            }\n        }\n    }, [props])\n\n\n    function handleItemClick(e) {\n\n        //send selected item to parent component\n        let pk = e.currentTarget.getAttribute('pk')\n        let selected_db_object = list.find((obj) => String(obj.id)===pk)\n\n        let form = {\n            html_selected: e.currentTarget,\n            object: selected_db_object\n        }\n\n        props.updateSelected(form)\n\n        //update visuals to show selected component\n        for (let el of document.getElementsByClassName('list-element')) {\n            el===e.currentTarget? el.className = 'list-element selected' : el.className = 'list-element selectable'\n        }\n    }\n\n\n    function displayElement(el) {\n\n        return (\n            <div className='selection-list-element-container'>\n\n                {props.display_title? <div class='selection-list-title'>\n                    {String(el.title)}\n                </div> : <div class='invisible'/>}\n\n                {props.display_audio? <audio \n                    controls\n                    src={el.filedata}\n                    class='selection-list-audio'>\n                </audio> : <div/>}\n\n            </div>\n        )\n    }\n    \n\n    return (\n        <div id='list-container' style={props.style_options? {...props.style_options} : null}>\n            {list? list[0].map(function(list_element) {\n\n                const element_props = {\n                    className: 'list-element',\n                    pk: list_element.id\n                }\n\n                if (props.selectable) {\n                    element_props['onClick'] = (e)=>handleItemClick(e)\n                    element_props['className'] = 'list-element selectable'\n                }\n\n                return (\n                    <div {...element_props}>\n                        {displayElement(list_element)}\n                    </div>\n                )\n            }) : 'retrieving list...'}\n        </div>\n    )\n}\n\nexport default SelectionList"]},"metadata":{},"sourceType":"module"}