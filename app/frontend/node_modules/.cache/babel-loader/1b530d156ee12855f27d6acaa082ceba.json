{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/SelectionList.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport './SelectionList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectionList(props) {\n  _s();\n\n  //general selection list\n  //props:\n  //list-type: backend-data\n  //object - the name of the object in backend to list\n  //select - are list items selectable?\n  const [list, setList] = useState(['retrieving list...']);\n  useEffect(() => {\n    if (props.list_type == 'backend-data') {\n      let form = new FormData();\n      form.append('object', props.object);\n      form.append('return', 'list');\n      axios({\n        method: 'post',\n        url: 'get-model',\n        data: form\n      }).then(response => {\n        setList(response.data);\n      });\n    }\n  }, [props]);\n\n  function handleItemClick(e) {\n    //send selected item to parent component\n    let pk = e.target.getAttribute('pk');\n    let selected_db_object = list.find(obj => String(obj.pk) == pk);\n    props.updateSelected([e.target, selected_db_object]); //update visuals to show selected component\n\n    for (let el of document.getElementsByClassName('list-element')) {\n      el == e.target ? el.className = 'list-element selected' : el.className = 'list-element selectable';\n    }\n  }\n\n  function displayElement(el) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [props.display_title ? String(el.fields.title) : /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"invisible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 65\n      }, this), props.display_audio ? /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: el.fields.filedata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"invisible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"list-container\",\n    children: list.map(function (list_element) {\n      if (!list_element.fields) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 28\n        }, this);\n      }\n\n      const element_props = {\n        className: 'list-element',\n        pk: list_element.pk\n      };\n\n      if (props.selectable) {\n        element_props['onClick'] = e => handleItemClick(e);\n\n        element_props['className'] = 'list-element selectable';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", { ...element_props,\n        children: displayElement(list_element)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectionList, \"lwtsKNE5UzdVL2RyDeeGu8EJ5VE=\");\n\n_c = SelectionList;\nexport default SelectionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionList\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/SelectionList.js"],"names":["axios","useState","useEffect","SelectionList","props","list","setList","list_type","form","FormData","append","object","method","url","data","then","response","handleItemClick","e","pk","target","getAttribute","selected_db_object","find","obj","String","updateSelected","el","document","getElementsByClassName","className","displayElement","display_title","fields","title","display_audio","filedata","map","list_element","element_props","selectable"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport './SelectionList.css'\n\nfunction SelectionList(props) {\n    //general selection list\n\n    //props:\n    //list-type: backend-data\n        //object - the name of the object in backend to list\n        //select - are list items selectable?\n\n    const [ list, setList ] = useState(['retrieving list...'])\n\n    useEffect(() => {\n        if (props.list_type=='backend-data') {\n        \n            let form = new FormData\n            form.append('object', props.object)\n            form.append('return', 'list')\n    \n            axios({\n                method: 'post',\n                url: 'get-model',\n                data: form\n            }).then((response) => {\n                setList(response.data)\n            }\n            )\n        }\n    }, [props])\n\n    function handleItemClick(e) {\n        //send selected item to parent component\n        let pk = e.target.getAttribute('pk')\n        let selected_db_object = list.find((obj)=>String(obj.pk)==pk)\n\n        props.updateSelected([e.target, selected_db_object])\n\n        //update visuals to show selected component\n        for (let el of document.getElementsByClassName('list-element')) {\n            el==e.target? el.className = 'list-element selected' : el.className = 'list-element selectable'\n        }\n    }\n\n\n    function displayElement(el) {\n        return (\n            <div>\n                {props.display_title? String(el.fields.title) : <div class='invisible'/>}\n                {props.display_audio? \n                <audio \n                    controls\n                    src={el.fields.filedata}\n                ></audio>\n                : <div class='invisible'/>}\n            </div>\n        )\n    }\n    \n    return (\n        <div id='list-container'>\n            {list.map(function(list_element) {\n\n                if (!list_element.fields) {\n                    return <div>{list}</div>\n                }\n\n                const element_props = {\n                    className: 'list-element',\n                    pk: list_element.pk\n                }\n\n                if (props.selectable) {\n                    element_props['onClick'] = (e)=>handleItemClick(e)\n                    element_props['className'] = 'list-element selectable'\n                }\n\n                return (\n                    <div {...element_props}>\n                        {displayElement(list_element)}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default SelectionList"]},"metadata":{},"sourceType":"module"}