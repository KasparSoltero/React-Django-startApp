{"ast":null,"code":"/* \n *  DSP.js - a comprehensive digital signal processing  library for javascript\n * \n *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.\n *  Copyright 2010 Corban Brook. All rights reserved.\n *\n */\n////////////////////////////////////////////////////////////////////////////////\n//                                  CONSTANTS                                 //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DSP is an object which contains general purpose utility functions and constants\n */\nvar DSP = {\n  // Channels\n  LEFT: 0,\n  RIGHT: 1,\n  MIX: 2,\n  // Waveforms\n  SINE: 1,\n  TRIANGLE: 2,\n  SAW: 3,\n  SQUARE: 4,\n  // Filters\n  LOWPASS: 0,\n  HIGHPASS: 1,\n  BANDPASS: 2,\n  NOTCH: 3,\n  // Window functions\n  BARTLETT: 1,\n  BARTLETTHANN: 2,\n  BLACKMAN: 3,\n  COSINE: 4,\n  GAUSS: 5,\n  HAMMING: 6,\n  HANN: 7,\n  LANCZOS: 8,\n  RECTANGULAR: 9,\n  TRIANGULAR: 10,\n  // Loop modes\n  OFF: 0,\n  FW: 1,\n  BW: 2,\n  FWBW: 3,\n  // Math\n  TWO_PI: 2 * Math.PI\n}; // Setup arrays for platforms which do not support byte arrays\n\nfunction setupTypedArray(name, fallback) {\n  // check if TypedArray exists\n  // typeof on Minefield and Chrome return function, typeof on Webkit returns object.\n  if (typeof this[name] !== \"function\" && typeof this[name] !== \"object\") {\n    // nope.. check if WebGLArray exists\n    if (typeof this[fallback] === \"function\" && typeof this[fallback] !== \"object\") {\n      this[name] = this[fallback];\n    } else {\n      // nope.. set as Native JS array\n      this[name] = function (obj) {\n        if (obj instanceof Array) {\n          return obj;\n        } else if (typeof obj === \"number\") {\n          return new Array(obj);\n        }\n      };\n    }\n  }\n}\n\nsetupTypedArray(\"Float64Array\", \"WebGLFloatArray\");\nsetupTypedArray(\"Int32Array\", \"WebGLIntArray\");\nsetupTypedArray(\"Uint16Array\", \"WebGLUnsignedShortArray\");\nsetupTypedArray(\"Uint8Array\", \"WebGLUnsignedByteArray\"); ////////////////////////////////////////////////////////////////////////////////\n//                            DSP UTILITY FUNCTIONS                           //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Inverts the phase of a signal\n *\n * @param {Array} buffer A sample buffer\n *\n * @returns The inverted sample buffer\n */\n\nDSP.invert = function (buffer) {\n  for (var i = 0, len = buffer.length; i < len; i++) {\n    buffer[i] *= -1;\n  }\n\n  return buffer;\n};\n/**\n * Converts split-stereo (dual mono) sample buffers into a stereo interleaved sample buffer\n *\n * @param {Array} left  A sample buffer\n * @param {Array} right A sample buffer\n *\n * @returns The stereo interleaved buffer\n */\n\n\nDSP.interleave = function (left, right) {\n  if (left.length !== right.length) {\n    throw \"Can not interleave. Channel lengths differ.\";\n  }\n\n  var stereoInterleaved = new Float64Array(left.length * 2);\n\n  for (var i = 0, len = left.length; i < len; i++) {\n    stereoInterleaved[2 * i] = left[i];\n    stereoInterleaved[2 * i + 1] = right[i];\n  }\n\n  return stereoInterleaved;\n};\n/**\n * Converts a stereo-interleaved sample buffer into split-stereo (dual mono) sample buffers\n *\n * @param {Array} buffer A stereo-interleaved sample buffer\n *\n * @returns an Array containing left and right channels\n */\n\n\nDSP.deinterleave = function () {\n  var left,\n      right,\n      mix,\n      deinterleaveChannel = [];\n\n  deinterleaveChannel[DSP.MIX] = function (buffer) {\n    for (var i = 0, len = buffer.length / 2; i < len; i++) {\n      mix[i] = (buffer[2 * i] + buffer[2 * i + 1]) / 2;\n    }\n\n    return mix;\n  };\n\n  deinterleaveChannel[DSP.LEFT] = function (buffer) {\n    for (var i = 0, len = buffer.length / 2; i < len; i++) {\n      left[i] = buffer[2 * i];\n    }\n\n    return left;\n  };\n\n  deinterleaveChannel[DSP.RIGHT] = function (buffer) {\n    for (var i = 0, len = buffer.length / 2; i < len; i++) {\n      right[i] = buffer[2 * i + 1];\n    }\n\n    return right;\n  };\n\n  return function (channel, buffer) {\n    left = left || new Float64Array(buffer.length / 2);\n    right = right || new Float64Array(buffer.length / 2);\n    mix = mix || new Float64Array(buffer.length / 2);\n\n    if (buffer.length / 2 !== left.length) {\n      left = new Float64Array(buffer.length / 2);\n      right = new Float64Array(buffer.length / 2);\n      mix = new Float64Array(buffer.length / 2);\n    }\n\n    return deinterleaveChannel[channel](buffer);\n  };\n}();\n/**\n * Separates a channel from a stereo-interleaved sample buffer\n *\n * @param {Array}  buffer A stereo-interleaved sample buffer\n * @param {Number} channel A channel constant (LEFT, RIGHT, MIX)\n *\n * @returns an Array containing a signal mono sample buffer\n */\n\n\nDSP.getChannel = DSP.deinterleave;\n/**\n * Helper method (for Reverb) to mix two (interleaved) samplebuffers. It's possible\n * to negate the second buffer while mixing and to perform a volume correction\n * on the final signal.\n *\n * @param {Array} sampleBuffer1 Array containing Float values or a Float64Array\n * @param {Array} sampleBuffer2 Array containing Float values or a Float64Array\n * @param {Boolean} negate When true inverts/flips the audio signal\n * @param {Number} volumeCorrection When you add multiple sample buffers, use this to tame your signal ;)\n *\n * @returns A new Float64Array interleaved buffer.\n */\n\nDSP.mixSampleBuffers = function (sampleBuffer1, sampleBuffer2, negate, volumeCorrection) {\n  var outputSamples = new Float64Array(sampleBuffer1);\n\n  for (var i = 0; i < sampleBuffer1.length; i++) {\n    outputSamples[i] += (negate ? -sampleBuffer2[i] : sampleBuffer2[i]) / volumeCorrection;\n  }\n\n  return outputSamples;\n}; // Biquad filter types\n\n\nDSP.LPF = 0; // H(s) = 1 / (s^2 + s/Q + 1)\n\nDSP.HPF = 1; // H(s) = s^2 / (s^2 + s/Q + 1)\n\nDSP.BPF_CONSTANT_SKIRT = 2; // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\n\nDSP.BPF_CONSTANT_PEAK = 3; // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\n\nDSP.NOTCH = 4; // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\n\nDSP.APF = 5; // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\n\nDSP.PEAKING_EQ = 6; // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\n\nDSP.LOW_SHELF = 7; // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\n\nDSP.HIGH_SHELF = 8; // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n// Biquad filter parameter types\n\nDSP.Q = 1;\nDSP.BW = 2; // SHARED with BACKWARDS LOOP MODE\n\nDSP.S = 3; // Find RMS of signal\n\nDSP.RMS = function (buffer) {\n  var total = 0;\n\n  for (var i = 0, n = buffer.length; i < n; i++) {\n    total += buffer[i] * buffer[i];\n  }\n\n  return Math.sqrt(total / n);\n}; // Find Peak of signal\n\n\nDSP.Peak = function (buffer) {\n  var peak = 0;\n\n  for (var i = 0, n = buffer.length; i < n; i++) {\n    peak = Math.abs(buffer[i]) > peak ? Math.abs(buffer[i]) : peak;\n  }\n\n  return peak;\n}; // Fourier Transform Module used by DFT, FFT, RFFT\n\n\nfunction FourierTransform(bufferSize, sampleRate) {\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.bandwidth = 2 / bufferSize * sampleRate / 2;\n  this.spectrum = new Float64Array(bufferSize / 2);\n  this.real = new Float64Array(bufferSize);\n  this.imag = new Float64Array(bufferSize);\n  this.peakBand = 0;\n  this.peak = 0;\n  /**\n   * Calculates the *middle* frequency of an FFT band.\n   *\n   * @param {Number} index The index of the FFT band.\n   *\n   * @returns The middle frequency in Hz.\n   */\n\n  this.getBandFrequency = function (index) {\n    return this.bandwidth * index + this.bandwidth / 2;\n  };\n\n  this.calculateSpectrum = function () {\n    var spectrum = this.spectrum,\n        real = this.real,\n        imag = this.imag,\n        bSi = 2 / this.bufferSize,\n        sqrt = Math.sqrt,\n        rval,\n        ival,\n        mag;\n\n    for (var i = 0, N = bufferSize / 2; i < N; i++) {\n      rval = real[i];\n      ival = imag[i];\n      mag = bSi * sqrt(rval * rval + ival * ival);\n\n      if (mag > this.peak) {\n        this.peakBand = i;\n        this.peak = mag;\n      }\n\n      spectrum[i] = mag;\n    }\n  };\n}\n/**\n * DFT is a class for calculating the Discrete Fourier Transform of a signal.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\n\n\nfunction DFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n  var N = bufferSize / 2 * bufferSize;\n  var TWO_PI = 2 * Math.PI;\n  this.sinTable = new Float64Array(N);\n  this.cosTable = new Float64Array(N);\n\n  for (var i = 0; i < N; i++) {\n    this.sinTable[i] = Math.sin(i * TWO_PI / bufferSize);\n    this.cosTable[i] = Math.cos(i * TWO_PI / bufferSize);\n  }\n}\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer\n *\n * @returns The frequency spectrum array\n */\n\n\nDFT.prototype.forward = function (buffer) {\n  var real = this.real,\n      imag = this.imag,\n      rval,\n      ival;\n\n  for (var k = 0; k < this.bufferSize / 2; k++) {\n    rval = 0.0;\n    ival = 0.0;\n\n    for (var n = 0; n < buffer.length; n++) {\n      rval += this.cosTable[k * n] * buffer[n];\n      ival += this.sinTable[k * n] * buffer[n];\n    }\n\n    real[k] = rval;\n    imag[k] = ival;\n  }\n\n  return this.calculateSpectrum();\n};\n/**\n * FFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\n\n\nfunction FFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n  this.reverseTable = new Uint32Array(bufferSize);\n  var limit = 1;\n  var bit = bufferSize >> 1;\n  var i;\n\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i++) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n    }\n\n    limit = limit << 1;\n    bit = bit >> 1;\n  }\n\n  this.sinTable = new Float64Array(bufferSize);\n  this.cosTable = new Float64Array(bufferSize);\n\n  for (i = 0; i < bufferSize; i++) {\n    this.sinTable[i] = Math.sin(-Math.PI / i);\n    this.cosTable[i] = Math.cos(-Math.PI / i);\n  }\n}\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer. Buffer Length must be power of 2\n *\n * @returns The frequency spectrum array\n */\n\n\nFFT.prototype.forward = function (buffer) {\n  // Locally scope variables for speed up\n  var bufferSize = this.bufferSize,\n      cosTable = this.cosTable,\n      sinTable = this.sinTable,\n      reverseTable = this.reverseTable,\n      real = this.real,\n      imag = this.imag,\n      spectrum = this.spectrum;\n  var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n  if (Math.pow(2, k) !== bufferSize) {\n    throw \"Invalid buffer size, must be a power of 2.\";\n  }\n\n  if (bufferSize !== buffer.length) {\n    throw \"Supplied buffer is not the same size as defined FFT. FFT Size: \" + bufferSize + \" Buffer Size: \" + buffer.length;\n  }\n\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    real[i] = buffer[reverseTable[i]];\n    imag[i] = 0;\n  }\n\n  while (halfSize < bufferSize) {\n    //phaseShiftStepReal = Math.cos(-Math.PI/halfSize);\n    //phaseShiftStepImag = Math.sin(-Math.PI/halfSize);\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];\n        ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;\n      currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  return this.calculateSpectrum();\n};\n\nFFT.prototype.inverse = function (real, imag) {\n  // Locally scope variables for speed up\n  var bufferSize = this.bufferSize,\n      cosTable = this.cosTable,\n      sinTable = this.sinTable,\n      reverseTable = this.reverseTable,\n      spectrum = this.spectrum;\n  real = real || this.real;\n  imag = imag || this.imag;\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    imag[i] *= -1;\n  }\n\n  var revReal = new Float64Array(bufferSize);\n  var revImag = new Float64Array(bufferSize);\n\n  for (i = 0; i < real.length; i++) {\n    revReal[i] = real[reverseTable[i]];\n    revImag[i] = imag[reverseTable[i]];\n  }\n\n  real = revReal;\n  imag = revImag;\n\n  while (halfSize < bufferSize) {\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];\n        ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;\n      currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  var buffer = new Float64Array(bufferSize); // this should be reused instead\n\n  for (i = 0; i < bufferSize; i++) {\n    buffer[i] = real[i] / bufferSize;\n  }\n\n  return buffer;\n};\n/**\n * RFFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * This method currently only contains a forward transform but is highly optimized.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\n// lookup tables don't really gain us any speed, but they do increase\n// cache footprint, so don't use them in here\n// also we don't use sepearate arrays for real/imaginary parts\n// this one a little more than twice as fast as the one in FFT\n// however I only did the forward transform\n// the rest of this was translated from C, see http://www.jjj.de/fxt/\n// this is the real split radix FFT\n\n\nfunction RFFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n  this.trans = new Float64Array(bufferSize);\n  this.reverseTable = new Uint32Array(bufferSize); // don't use a lookup table to do the permute, use this instead\n\n  this.reverseBinPermute = function (dest, source) {\n    var bufferSize = this.bufferSize,\n        halfSize = bufferSize >>> 1,\n        nm1 = bufferSize - 1,\n        i = 1,\n        r = 0,\n        h;\n    dest[0] = source[0];\n\n    do {\n      r += halfSize;\n      dest[i] = source[r];\n      dest[r] = source[i];\n      i++;\n      h = halfSize << 1;\n\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) {\n        dest[i] = source[r];\n        dest[r] = source[i];\n        dest[nm1 - i] = source[nm1 - r];\n        dest[nm1 - r] = source[nm1 - i];\n      }\n\n      i++;\n    } while (i < halfSize);\n\n    dest[nm1] = source[nm1];\n  };\n\n  this.generateReverseTable = function () {\n    var bufferSize = this.bufferSize,\n        halfSize = bufferSize >>> 1,\n        nm1 = bufferSize - 1,\n        i = 1,\n        r = 0,\n        h;\n    this.reverseTable[0] = 0;\n\n    do {\n      r += halfSize;\n      this.reverseTable[i] = r;\n      this.reverseTable[r] = i;\n      i++;\n      h = halfSize << 1;\n\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) {\n        this.reverseTable[i] = r;\n        this.reverseTable[r] = i;\n        this.reverseTable[nm1 - i] = nm1 - r;\n        this.reverseTable[nm1 - r] = nm1 - i;\n      }\n\n      i++;\n    } while (i < halfSize);\n\n    this.reverseTable[nm1] = nm1;\n  };\n\n  this.generateReverseTable();\n} // Ordering of output:\n//\n// trans[0]     = re[0] (==zero frequency, purely real)\n// trans[1]     = re[1]\n//             ...\n// trans[n/2-1] = re[n/2-1]\n// trans[n/2]   = re[n/2]    (==nyquist frequency, purely real)\n//\n// trans[n/2+1] = im[n/2-1]\n// trans[n/2+2] = im[n/2-2]\n//             ...\n// trans[n-1]   = im[1] \n\n\nRFFT.prototype.forward = function (buffer) {\n  var n = this.bufferSize,\n      spectrum = this.spectrum,\n      x = this.trans,\n      TWO_PI = 2 * Math.PI,\n      sqrt = Math.sqrt,\n      i = n >>> 1,\n      bSi = 2 / n,\n      n2,\n      n4,\n      n8,\n      nn,\n      t1,\n      t2,\n      t3,\n      t4,\n      i1,\n      i2,\n      i3,\n      i4,\n      i5,\n      i6,\n      i7,\n      i8,\n      st1,\n      cc1,\n      ss1,\n      cc3,\n      ss3,\n      e,\n      a,\n      rval,\n      ival,\n      mag;\n  this.reverseBinPermute(x, buffer);\n  /*\n  var reverseTable = this.reverseTable;\n   for (var k = 0, len = reverseTable.length; k < len; k++) {\n    x[k] = buffer[reverseTable[k]];\n  }\n  */\n\n  for (var ix = 0, id = 4; ix < n; id *= 4) {\n    for (var i0 = ix; i0 < n; i0 += id) {\n      //sumdiff(x[i0], x[i0+1]); // {a, b}  <--| {a+b, a-b}\n      st1 = x[i0] - x[i0 + 1];\n      x[i0] += x[i0 + 1];\n      x[i0 + 1] = st1;\n    }\n\n    ix = 2 * (id - 1);\n  }\n\n  n2 = 2;\n  nn = n >>> 1;\n\n  while (nn = nn >>> 1) {\n    ix = 0;\n    n2 = n2 << 1;\n    id = n2 << 1;\n    n4 = n2 >>> 2;\n    n8 = n2 >>> 3;\n\n    do {\n      if (n4 !== 1) {\n        for (i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4; //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n\n          t1 = x[i3] + x[i4];\n          x[i4] -= x[i3]; //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n\n          x[i3] = x[i1] - t1;\n          x[i1] += t1;\n          i1 += n8;\n          i2 += n8;\n          i3 += n8;\n          i4 += n8; //sumdiff(x[i3], x[i4], t1, t2); // {s, d}  <--| {a+b, a-b}\n\n          t1 = x[i3] + x[i4];\n          t2 = x[i3] - x[i4];\n          t1 = -t1 * Math.SQRT1_2;\n          t2 *= Math.SQRT1_2; // sumdiff(t1, x[i2], x[i4], x[i3]); // {s, d}  <--| {a+b, a-b}\n\n          st1 = x[i2];\n          x[i4] = t1 + st1;\n          x[i3] = t1 - st1; //sumdiff3(x[i1], t2, x[i2]); // {a, b, d} <--| {a+b, b, a-b}\n\n          x[i2] = x[i1] - t2;\n          x[i1] += t2;\n        }\n      } else {\n        for (i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4; //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n\n          t1 = x[i3] + x[i4];\n          x[i4] -= x[i3]; //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n\n          x[i3] = x[i1] - t1;\n          x[i1] += t1;\n        }\n      }\n\n      ix = (id << 1) - n2;\n      id = id << 2;\n    } while (ix < n);\n\n    e = TWO_PI / n2;\n\n    for (var j = 1; j < n8; j++) {\n      a = j * e;\n      ss1 = Math.sin(a);\n      cc1 = Math.cos(a); //ss3 = sin(3*a); cc3 = cos(3*a);\n\n      cc3 = 4 * cc1 * (cc1 * cc1 - 0.75);\n      ss3 = 4 * ss1 * (0.75 - ss1 * ss1);\n      ix = 0;\n      id = n2 << 1;\n\n      do {\n        for (i0 = ix; i0 < n; i0 += id) {\n          i1 = i0 + j;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n          i5 = i0 + n4 - j;\n          i6 = i5 + n4;\n          i7 = i6 + n4;\n          i8 = i7 + n4; //cmult(c, s, x, y, &u, &v)\n          //cmult(cc1, ss1, x[i7], x[i3], t2, t1); // {u,v} <--| {x*c-y*s, x*s+y*c}\n\n          t2 = x[i7] * cc1 - x[i3] * ss1;\n          t1 = x[i7] * ss1 + x[i3] * cc1; //cmult(cc3, ss3, x[i8], x[i4], t4, t3);\n\n          t4 = x[i8] * cc3 - x[i4] * ss3;\n          t3 = x[i8] * ss3 + x[i4] * cc3; //sumdiff(t2, t4);   // {a, b} <--| {a+b, a-b}\n\n          st1 = t2 - t4;\n          t2 += t4;\n          t4 = st1; //sumdiff(t2, x[i6], x[i8], x[i3]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i6]; x[i8] = t2 + st1; x[i3] = t2 - st1;\n\n          x[i8] = t2 + x[i6];\n          x[i3] = t2 - x[i6]; //sumdiff_r(t1, t3); // {a, b} <--| {a+b, b-a}\n\n          st1 = t3 - t1;\n          t1 += t3;\n          t3 = st1; //sumdiff(t3, x[i2], x[i4], x[i7]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i2]; x[i4] = t3 + st1; x[i7] = t3 - st1;\n\n          x[i4] = t3 + x[i2];\n          x[i7] = t3 - x[i2]; //sumdiff3(x[i1], t1, x[i6]);   // {a, b, d} <--| {a+b, b, a-b}\n\n          x[i6] = x[i1] - t1;\n          x[i1] += t1; //diffsum3_r(t4, x[i5], x[i2]); // {a, b, s} <--| {a, b-a, a+b}\n\n          x[i2] = t4 + x[i5];\n          x[i5] -= t4;\n        }\n\n        ix = (id << 1) - n2;\n        id = id << 2;\n      } while (ix < n);\n    }\n  }\n\n  while (--i) {\n    rval = x[i];\n    ival = x[n - i - 1];\n    mag = bSi * sqrt(rval * rval + ival * ival);\n\n    if (mag > this.peak) {\n      this.peakBand = i;\n      this.peak = mag;\n    }\n\n    spectrum[i] = mag;\n  }\n\n  spectrum[0] = bSi * x[0];\n  return spectrum;\n};\n\nfunction Sampler(file, bufferSize, sampleRate, playStart, playEnd, loopStart, loopEnd, loopMode) {\n  this.file = file;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.playStart = playStart || 0; // 0%\n\n  this.playEnd = playEnd || 1; // 100%\n\n  this.loopStart = loopStart || 0;\n  this.loopEnd = loopEnd || 1;\n  this.loopMode = loopMode || DSP.OFF;\n  this.loaded = false;\n  this.samples = [];\n  this.signal = new Float64Array(bufferSize);\n  this.frameCount = 0;\n  this.envelope = null;\n  this.amplitude = 1;\n  this.rootFrequency = 110; // A2 110\n\n  this.frequency = 550;\n  this.step = this.frequency / this.rootFrequency;\n  this.duration = 0;\n  this.samplesProcessed = 0;\n  this.playhead = 0;\n  var audio =\n  /* new Audio();*/\n  document.createElement(\"AUDIO\");\n  var self = this;\n\n  this.loadSamples = function (event) {\n    var buffer = DSP.getChannel(DSP.MIX, event.frameBuffer);\n\n    for (var i = 0; i < buffer.length; i++) {\n      self.samples.push(buffer[i]);\n    }\n  };\n\n  this.loadComplete = function () {\n    // convert flexible js array into a fast typed array\n    self.samples = new Float64Array(self.samples);\n    self.loaded = true;\n  };\n\n  this.loadMetaData = function () {\n    self.duration = audio.duration;\n  };\n\n  audio.addEventListener(\"MozAudioAvailable\", this.loadSamples, false);\n  audio.addEventListener(\"loadedmetadata\", this.loadMetaData, false);\n  audio.addEventListener(\"ended\", this.loadComplete, false);\n  audio.muted = true;\n  audio.src = file;\n  audio.play();\n}\n\nSampler.prototype.applyEnvelope = function () {\n  this.envelope.process(this.signal);\n  return this.signal;\n};\n\nSampler.prototype.generate = function () {\n  var frameOffset = this.frameCount * this.bufferSize;\n  var loopWidth = this.playEnd * this.samples.length - this.playStart * this.samples.length;\n  var playStartSamples = this.playStart * this.samples.length; // ie 0.5 -> 50% of the length\n\n  var playEndSamples = this.playEnd * this.samples.length; // ie 0.5 -> 50% of the length\n\n  var offset;\n\n  for (var i = 0; i < this.bufferSize; i++) {\n    switch (this.loopMode) {\n      case DSP.OFF:\n        this.playhead = Math.round(this.samplesProcessed * this.step + playStartSamples);\n\n        if (this.playhead < this.playEnd * this.samples.length) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        } else {\n          this.signal[i] = 0;\n        }\n\n        break;\n\n      case DSP.FW:\n        this.playhead = Math.round(this.samplesProcessed * this.step % loopWidth + playStartSamples);\n\n        if (this.playhead < this.playEnd * this.samples.length) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n\n        break;\n\n      case DSP.BW:\n        this.playhead = playEndSamples - Math.round(this.samplesProcessed * this.step % loopWidth);\n\n        if (this.playhead < this.playEnd * this.samples.length) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n\n        break;\n\n      case DSP.FWBW:\n        if (Math.floor(this.samplesProcessed * this.step / loopWidth) % 2 === 0) {\n          this.playhead = Math.round(this.samplesProcessed * this.step % loopWidth + playStartSamples);\n        } else {\n          this.playhead = playEndSamples - Math.round(this.samplesProcessed * this.step % loopWidth);\n        }\n\n        if (this.playhead < this.playEnd * this.samples.length) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n\n        break;\n    }\n\n    this.samplesProcessed++;\n  }\n\n  this.frameCount++;\n  return this.signal;\n};\n\nSampler.prototype.setFreq = function (frequency) {\n  var totalProcessed = this.samplesProcessed * this.step;\n  this.frequency = frequency;\n  this.step = this.frequency / this.rootFrequency;\n  this.samplesProcessed = Math.round(totalProcessed / this.step);\n};\n\nSampler.prototype.reset = function () {\n  this.samplesProcessed = 0;\n  this.playhead = 0;\n};\n/**\n * Oscillator class for generating and modifying signals\n *\n * @param {Number} type       A waveform constant (eg. DSP.SINE)\n * @param {Number} frequency  Initial frequency of the signal\n * @param {Number} amplitude  Initial amplitude of the signal\n * @param {Number} bufferSize Size of the sample buffer to generate\n * @param {Number} sampleRate The sample rate of the signal\n *\n * @contructor\n */\n\n\nfunction Oscillator(type, frequency, amplitude, bufferSize, sampleRate) {\n  this.frequency = frequency;\n  this.amplitude = amplitude;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate; //this.pulseWidth = pulseWidth;\n\n  this.frameCount = 0;\n  this.waveTableLength = 2048;\n  this.cyclesPerSample = frequency / sampleRate;\n  this.signal = new Float64Array(bufferSize);\n  this.envelope = null;\n\n  switch (parseInt(type, 10)) {\n    case DSP.TRIANGLE:\n      this.func = Oscillator.Triangle;\n      break;\n\n    case DSP.SAW:\n      this.func = Oscillator.Saw;\n      break;\n\n    case DSP.SQUARE:\n      this.func = Oscillator.Square;\n      break;\n\n    default:\n    case DSP.SINE:\n      this.func = Oscillator.Sine;\n      break;\n  }\n\n  this.generateWaveTable = function () {\n    Oscillator.waveTable[this.func] = new Float64Array(2048);\n    var waveTableTime = this.waveTableLength / this.sampleRate;\n    var waveTableHz = 1 / waveTableTime;\n\n    for (var i = 0; i < this.waveTableLength; i++) {\n      Oscillator.waveTable[this.func][i] = this.func(i * waveTableHz / this.sampleRate);\n    }\n  };\n\n  if (typeof Oscillator.waveTable === 'undefined') {\n    Oscillator.waveTable = {};\n  }\n\n  if (typeof Oscillator.waveTable[this.func] === 'undefined') {\n    this.generateWaveTable();\n  }\n\n  this.waveTable = Oscillator.waveTable[this.func];\n}\n/**\n * Set the amplitude of the signal\n *\n * @param {Number} amplitude The amplitude of the signal (between 0 and 1)\n */\n\n\nOscillator.prototype.setAmp = function (amplitude) {\n  if (amplitude >= 0 && amplitude <= 1) {\n    this.amplitude = amplitude;\n  } else {\n    throw \"Amplitude out of range (0..1).\";\n  }\n};\n/**\n * Set the frequency of the signal\n *\n * @param {Number} frequency The frequency of the signal\n */\n\n\nOscillator.prototype.setFreq = function (frequency) {\n  this.frequency = frequency;\n  this.cyclesPerSample = frequency / this.sampleRate;\n}; // Add an oscillator\n\n\nOscillator.prototype.add = function (oscillator) {\n  for (var i = 0; i < this.bufferSize; i++) {\n    //this.signal[i] += oscillator.valueAt(i);\n    this.signal[i] += oscillator.signal[i];\n  }\n\n  return this.signal;\n}; // Add a signal to the current generated osc signal\n\n\nOscillator.prototype.addSignal = function (signal) {\n  for (var i = 0; i < signal.length; i++) {\n    if (i >= this.bufferSize) {\n      break;\n    }\n\n    this.signal[i] += signal[i];\n    /*\n    // Constrain amplitude\n    if ( this.signal[i] > 1 ) {\n      this.signal[i] = 1;\n    } else if ( this.signal[i] < -1 ) {\n      this.signal[i] = -1;\n    }\n    */\n  }\n\n  return this.signal;\n}; // Add an envelope to the oscillator\n\n\nOscillator.prototype.addEnvelope = function (envelope) {\n  this.envelope = envelope;\n};\n\nOscillator.prototype.applyEnvelope = function () {\n  this.envelope.process(this.signal);\n};\n\nOscillator.prototype.valueAt = function (offset) {\n  return this.waveTable[offset % this.waveTableLength];\n};\n\nOscillator.prototype.generate = function () {\n  var frameOffset = this.frameCount * this.bufferSize;\n  var step = this.waveTableLength * this.frequency / this.sampleRate;\n  var offset;\n\n  for (var i = 0; i < this.bufferSize; i++) {\n    //var step = (frameOffset + i) * this.cyclesPerSample % 1;\n    //this.signal[i] = this.func(step) * this.amplitude;\n    //this.signal[i] = this.valueAt(Math.round((frameOffset + i) * step)) * this.amplitude;\n    offset = Math.round((frameOffset + i) * step);\n    this.signal[i] = this.waveTable[offset % this.waveTableLength] * this.amplitude;\n  }\n\n  this.frameCount++;\n  return this.signal;\n};\n\nOscillator.Sine = function (step) {\n  return Math.sin(DSP.TWO_PI * step);\n};\n\nOscillator.Square = function (step) {\n  return step < 0.5 ? 1 : -1;\n};\n\nOscillator.Saw = function (step) {\n  return 2 * (step - Math.round(step));\n};\n\nOscillator.Triangle = function (step) {\n  return 1 - 4 * Math.abs(Math.round(step) - step);\n};\n\nOscillator.Pulse = function (step) {// stub\n};\n\nfunction ADSR(attackLength, decayLength, sustainLevel, sustainLength, releaseLength, sampleRate) {\n  this.sampleRate = sampleRate; // Length in seconds\n\n  this.attackLength = attackLength;\n  this.decayLength = decayLength;\n  this.sustainLevel = sustainLevel;\n  this.sustainLength = sustainLength;\n  this.releaseLength = releaseLength;\n  this.sampleRate = sampleRate; // Length in samples\n\n  this.attackSamples = attackLength * sampleRate;\n  this.decaySamples = decayLength * sampleRate;\n  this.sustainSamples = sustainLength * sampleRate;\n  this.releaseSamples = releaseLength * sampleRate; // Updates the envelope sample positions\n\n  this.update = function () {\n    this.attack = this.attackSamples;\n    this.decay = this.attack + this.decaySamples;\n    this.sustain = this.decay + this.sustainSamples;\n    this.release = this.sustain + this.releaseSamples;\n  };\n\n  this.update();\n  this.samplesProcessed = 0;\n}\n\nADSR.prototype.noteOn = function () {\n  this.samplesProcessed = 0;\n  this.sustainSamples = this.sustainLength * this.sampleRate;\n  this.update();\n}; // Send a note off when using a sustain of infinity to let the envelope enter the release phase\n\n\nADSR.prototype.noteOff = function () {\n  this.sustainSamples = this.samplesProcessed - this.decaySamples;\n  this.update();\n};\n\nADSR.prototype.processSample = function (sample) {\n  var amplitude = 0;\n\n  if (this.samplesProcessed <= this.attack) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if (this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if (this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain) {\n    amplitude = this.sustainLevel;\n  } else if (this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n\n  return sample * amplitude;\n};\n\nADSR.prototype.value = function () {\n  var amplitude = 0;\n\n  if (this.samplesProcessed <= this.attack) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if (this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if (this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain) {\n    amplitude = this.sustainLevel;\n  } else if (this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n\n  return amplitude;\n};\n\nADSR.prototype.process = function (buffer) {\n  for (var i = 0; i < buffer.length; i++) {\n    buffer[i] *= this.value();\n    this.samplesProcessed++;\n  }\n\n  return buffer;\n};\n\nADSR.prototype.isActive = function () {\n  if (this.samplesProcessed > this.release || this.samplesProcessed === -1) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nADSR.prototype.disable = function () {\n  this.samplesProcessed = -1;\n};\n\nfunction IIRFilter(type, cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n\n  switch (type) {\n    case DSP.LOWPASS:\n    case DSP.LP12:\n      this.func = new IIRFilter.LP12(cutoff, resonance, sampleRate);\n      break;\n  }\n}\n\nIIRFilter.prototype.__defineGetter__('cutoff', function () {\n  return this.func.cutoff;\n});\n\nIIRFilter.prototype.__defineGetter__('resonance', function () {\n  return this.func.resonance;\n});\n\nIIRFilter.prototype.set = function (cutoff, resonance) {\n  this.func.calcCoeff(cutoff, resonance);\n};\n\nIIRFilter.prototype.process = function (buffer) {\n  this.func.process(buffer);\n}; // Add an envelope to the filter\n\n\nIIRFilter.prototype.addEnvelope = function (envelope) {\n  if (envelope instanceof ADSR) {\n    this.func.addEnvelope(envelope);\n  } else {\n    throw \"Not an envelope.\";\n  }\n};\n\nIIRFilter.LP12 = function (cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n  this.vibraPos = 0;\n  this.vibraSpeed = 0;\n  this.envelope = false;\n\n  this.calcCoeff = function (cutoff, resonance) {\n    this.w = 2.0 * Math.PI * cutoff / this.sampleRate;\n    this.q = 1.0 - this.w / (2.0 * (resonance + 0.5 / (1.0 + this.w)) + this.w - 2.0);\n    this.r = this.q * this.q;\n    this.c = this.r + 1.0 - 2.0 * Math.cos(this.w) * this.q;\n    this.cutoff = cutoff;\n    this.resonance = resonance;\n  };\n\n  this.calcCoeff(cutoff, resonance);\n\n  this.process = function (buffer) {\n    for (var i = 0; i < buffer.length; i++) {\n      this.vibraSpeed += (buffer[i] - this.vibraPos) * this.c;\n      this.vibraPos += this.vibraSpeed;\n      this.vibraSpeed *= this.r;\n      /*\n      var temp = this.vibraPos;\n            if ( temp > 1.0 ) {\n        temp = 1.0;\n      } else if ( temp < -1.0 ) {\n        temp = -1.0;\n      } else if ( temp != temp ) {\n        temp = 1;\n      }\n            buffer[i] = temp;\n      */\n\n      if (this.envelope) {\n        buffer[i] = buffer[i] * (1 - this.envelope.value()) + this.vibraPos * this.envelope.value();\n        this.envelope.samplesProcessed++;\n      } else {\n        buffer[i] = this.vibraPos;\n      }\n    }\n  };\n};\n\nIIRFilter.LP12.prototype.addEnvelope = function (envelope) {\n  this.envelope = envelope;\n};\n\nfunction IIRFilter2(type, cutoff, resonance, sampleRate) {\n  this.type = type;\n  this.cutoff = cutoff;\n  this.resonance = resonance;\n  this.sampleRate = sampleRate;\n  this.f = Float64Array(4);\n  this.f[0] = 0.0; // lp\n\n  this.f[1] = 0.0; // hp\n\n  this.f[2] = 0.0; // bp\n\n  this.f[3] = 0.0; // br \n\n  this.calcCoeff = function (cutoff, resonance) {\n    this.freq = 2 * Math.sin(Math.PI * Math.min(0.25, cutoff / (this.sampleRate * 2)));\n    this.damp = Math.min(2 * (1 - Math.pow(resonance, 0.25)), Math.min(2, 2 / this.freq - this.freq * 0.5));\n  };\n\n  this.calcCoeff(cutoff, resonance);\n}\n\nIIRFilter2.prototype.process = function (buffer) {\n  var input, output;\n  var f = this.f;\n\n  for (var i = 0; i < buffer.length; i++) {\n    input = buffer[i]; // first pass\n\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output = 0.5 * f[this.type]; // second pass\n\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output += 0.5 * f[this.type];\n\n    if (this.envelope) {\n      buffer[i] = buffer[i] * (1 - this.envelope.value()) + output * this.envelope.value();\n      this.envelope.samplesProcessed++;\n    } else {\n      buffer[i] = output;\n    }\n  }\n};\n\nIIRFilter2.prototype.addEnvelope = function (envelope) {\n  if (envelope instanceof ADSR) {\n    this.envelope = envelope;\n  } else {\n    throw \"This is not an envelope.\";\n  }\n};\n\nIIRFilter2.prototype.set = function (cutoff, resonance) {\n  this.calcCoeff(cutoff, resonance);\n};\n\nfunction WindowFunction(type, alpha) {\n  this.alpha = alpha;\n\n  switch (type) {\n    case DSP.BARTLETT:\n      this.func = WindowFunction.Bartlett;\n      break;\n\n    case DSP.BARTLETTHANN:\n      this.func = WindowFunction.BartlettHann;\n      break;\n\n    case DSP.BLACKMAN:\n      this.func = WindowFunction.Blackman;\n      this.alpha = this.alpha || 0.16;\n      break;\n\n    case DSP.COSINE:\n      this.func = WindowFunction.Cosine;\n      break;\n\n    case DSP.GAUSS:\n      this.func = WindowFunction.Gauss;\n      this.alpha = this.alpha || 0.25;\n      break;\n\n    case DSP.HAMMING:\n      this.func = WindowFunction.Hamming;\n      break;\n\n    case DSP.HANN:\n      this.func = WindowFunction.Hann;\n      break;\n\n    case DSP.LANCZOS:\n      this.func = WindowFunction.Lanczoz;\n      break;\n\n    case DSP.RECTANGULAR:\n      this.func = WindowFunction.Rectangular;\n      break;\n\n    case DSP.TRIANGULAR:\n      this.func = WindowFunction.Triangular;\n      break;\n  }\n}\n\nWindowFunction.prototype.process = function (buffer) {\n  var length = buffer.length;\n\n  for (var i = 0; i < length; i++) {\n    buffer[i] *= this.func(length, i, this.alpha);\n  }\n\n  return buffer;\n};\n\nWindowFunction.Bartlett = function (length, index) {\n  return 2 / (length - 1) * ((length - 1) / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nWindowFunction.BartlettHann = function (length, index) {\n  return 0.62 - 0.48 * Math.abs(index / (length - 1) - 0.5) - 0.38 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Blackman = function (length, index, alpha) {\n  var a0 = (1 - alpha) / 2;\n  var a1 = 0.5;\n  var a2 = alpha / 2;\n  return a0 - a1 * Math.cos(DSP.TWO_PI * index / (length - 1)) + a2 * Math.cos(4 * Math.PI * index / (length - 1));\n};\n\nWindowFunction.Cosine = function (length, index) {\n  return Math.cos(Math.PI * index / (length - 1) - Math.PI / 2);\n};\n\nWindowFunction.Gauss = function (length, index, alpha) {\n  return Math.pow(Math.E, -0.5 * Math.pow((index - (length - 1) / 2) / (alpha * (length - 1) / 2), 2));\n};\n\nWindowFunction.Hamming = function (length, index) {\n  return 0.54 - 0.46 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Hann = function (length, index) {\n  return 0.5 * (1 - Math.cos(DSP.TWO_PI * index / (length - 1)));\n};\n\nWindowFunction.Lanczos = function (length, index) {\n  var x = 2 * index / (length - 1) - 1;\n  return Math.sin(Math.PI * x) / (Math.PI * x);\n};\n\nWindowFunction.Rectangular = function (length, index) {\n  return 1;\n};\n\nWindowFunction.Triangular = function (length, index) {\n  return 2 / length * (length / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nfunction sinh(arg) {\n  // Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2 \n  //\n  // version: 1004.2314\n  // discuss at: http://phpjs.org/functions/sinh    // +   original by: Onno Marsman\n  // *     example 1: sinh(-0.9834330348825909);\n  // *     returns 1: -1.1497971402636502\n  return (Math.exp(arg) - Math.exp(-arg)) / 2;\n}\n/* \n *  Biquad filter\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\n// Implementation based on:\n// http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\n\nfunction Biquad(type, sampleRate) {\n  this.Fs = sampleRate;\n  this.type = type; // type of the filter\n\n  this.parameterType = DSP.Q; // type of the parameter\n\n  this.x_1_l = 0;\n  this.x_2_l = 0;\n  this.y_1_l = 0;\n  this.y_2_l = 0;\n  this.x_1_r = 0;\n  this.x_2_r = 0;\n  this.y_1_r = 0;\n  this.y_2_r = 0;\n  this.b0 = 1;\n  this.a0 = 1;\n  this.b1 = 0;\n  this.a1 = 0;\n  this.b2 = 0;\n  this.a2 = 0;\n  this.b0a0 = this.b0 / this.a0;\n  this.b1a0 = this.b1 / this.a0;\n  this.b2a0 = this.b2 / this.a0;\n  this.a1a0 = this.a1 / this.a0;\n  this.a2a0 = this.a2 / this.a0;\n  this.f0 = 3000; // \"wherever it's happenin', man.\"  Center Frequency or\n  // Corner Frequency, or shelf midpoint frequency, depending\n  // on which filter type.  The \"significant frequency\".\n\n  this.dBgain = 12; // used only for peaking and shelving filters\n\n  this.Q = 1; // the EE kind of definition, except for peakingEQ in which A*Q is\n  // the classic EE Q.  That adjustment in definition was made so that\n  // a boost of N dB followed by a cut of N dB for identical Q and\n  // f0/Fs results in a precisely flat unity gain filter or \"wire\".\n\n  this.BW = -3; // the bandwidth in octaves (between -3 dB frequencies for BPF\n  // and notch or between midpoint (dBgain/2) gain frequencies for\n  // peaking EQ\n\n  this.S = 1; // a \"shelf slope\" parameter (for shelving EQ only).  When S = 1,\n  // the shelf slope is as steep as it can be and remain monotonically\n  // increasing or decreasing gain with frequency.  The shelf slope, in\n  // dB/octave, remains proportional to S for all other values for a\n  // fixed f0/Fs and dBgain.\n\n  this.coefficients = function () {\n    var b = [this.b0, this.b1, this.b2];\n    var a = [this.a0, this.a1, this.a2];\n    return {\n      b: b,\n      a: a\n    };\n  };\n\n  this.setFilterType = function (type) {\n    this.type = type;\n    this.recalculateCoefficients();\n  };\n\n  this.setSampleRate = function (rate) {\n    this.Fs = rate;\n    this.recalculateCoefficients();\n  };\n\n  this.setQ = function (q) {\n    this.parameterType = DSP.Q;\n    this.Q = Math.max(Math.min(q, 115.0), 0.001);\n    this.recalculateCoefficients();\n  };\n\n  this.setBW = function (bw) {\n    this.parameterType = DSP.BW;\n    this.BW = bw;\n    this.recalculateCoefficients();\n  };\n\n  this.setS = function (s) {\n    this.parameterType = DSP.S;\n    this.S = Math.max(Math.min(s, 5.0), 0.0001);\n    this.recalculateCoefficients();\n  };\n\n  this.setF0 = function (freq) {\n    this.f0 = freq;\n    this.recalculateCoefficients();\n  };\n\n  this.setDbGain = function (g) {\n    this.dBgain = g;\n    this.recalculateCoefficients();\n  };\n\n  this.recalculateCoefficients = function () {\n    var A;\n\n    if (type === DSP.PEAKING_EQ || type === DSP.LOW_SHELF || type === DSP.HIGH_SHELF) {\n      A = Math.pow(10, this.dBgain / 40); // for peaking and shelving EQ filters only\n    } else {\n      A = Math.sqrt(Math.pow(10, this.dBgain / 20));\n    }\n\n    var w0 = DSP.TWO_PI * this.f0 / this.Fs;\n    var cosw0 = Math.cos(w0);\n    var sinw0 = Math.sin(w0);\n    var alpha = 0;\n\n    switch (this.parameterType) {\n      case DSP.Q:\n        alpha = sinw0 / (2 * this.Q);\n        break;\n\n      case DSP.BW:\n        alpha = sinw0 * sinh(Math.LN2 / 2 * this.BW * w0 / sinw0);\n        break;\n\n      case DSP.S:\n        alpha = sinw0 / 2 * Math.sqrt((A + 1 / A) * (1 / this.S - 1) + 2);\n        break;\n    }\n    /**\n        FYI: The relationship between bandwidth and Q is\n             1/Q = 2*sinh(ln(2)/2*BW*w0/sin(w0))     (digital filter w BLT)\n        or   1/Q = 2*sinh(ln(2)/2*BW)             (analog filter prototype)\n         The relationship between shelf slope and Q is\n             1/Q = sqrt((A + 1/A)*(1/S - 1) + 2)\n    */\n\n\n    var coeff;\n\n    switch (this.type) {\n      case DSP.LPF:\n        // H(s) = 1 / (s^2 + s/Q + 1)\n        this.b0 = (1 - cosw0) / 2;\n        this.b1 = 1 - cosw0;\n        this.b2 = (1 - cosw0) / 2;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.HPF:\n        // H(s) = s^2 / (s^2 + s/Q + 1)\n        this.b0 = (1 + cosw0) / 2;\n        this.b1 = -(1 + cosw0);\n        this.b2 = (1 + cosw0) / 2;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_SKIRT:\n        // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\n        this.b0 = sinw0 / 2;\n        this.b1 = 0;\n        this.b2 = -sinw0 / 2;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_PEAK:\n        // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\n        this.b0 = alpha;\n        this.b1 = 0;\n        this.b2 = -alpha;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.NOTCH:\n        // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\n        this.b0 = 1;\n        this.b1 = -2 * cosw0;\n        this.b2 = 1;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.APF:\n        // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\n        this.b0 = 1 - alpha;\n        this.b1 = -2 * cosw0;\n        this.b2 = 1 + alpha;\n        this.a0 = 1 + alpha;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha;\n        break;\n\n      case DSP.PEAKING_EQ:\n        // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\n        this.b0 = 1 + alpha * A;\n        this.b1 = -2 * cosw0;\n        this.b2 = 1 - alpha * A;\n        this.a0 = 1 + alpha / A;\n        this.a1 = -2 * cosw0;\n        this.a2 = 1 - alpha / A;\n        break;\n\n      case DSP.LOW_SHELF:\n        // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\n        coeff = sinw0 * Math.sqrt((A ^ 2 + 1) * (1 / this.S - 1) + 2 * A);\n        this.b0 = A * (A + 1 - (A - 1) * cosw0 + coeff);\n        this.b1 = 2 * A * (A - 1 - (A + 1) * cosw0);\n        this.b2 = A * (A + 1 - (A - 1) * cosw0 - coeff);\n        this.a0 = A + 1 + (A - 1) * cosw0 + coeff;\n        this.a1 = -2 * (A - 1 + (A + 1) * cosw0);\n        this.a2 = A + 1 + (A - 1) * cosw0 - coeff;\n        break;\n\n      case DSP.HIGH_SHELF:\n        // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n        coeff = sinw0 * Math.sqrt((A ^ 2 + 1) * (1 / this.S - 1) + 2 * A);\n        this.b0 = A * (A + 1 + (A - 1) * cosw0 + coeff);\n        this.b1 = -2 * A * (A - 1 + (A + 1) * cosw0);\n        this.b2 = A * (A + 1 + (A - 1) * cosw0 - coeff);\n        this.a0 = A + 1 - (A - 1) * cosw0 + coeff;\n        this.a1 = 2 * (A - 1 - (A + 1) * cosw0);\n        this.a2 = A + 1 - (A - 1) * cosw0 - coeff;\n        break;\n    }\n\n    this.b0a0 = this.b0 / this.a0;\n    this.b1a0 = this.b1 / this.a0;\n    this.b2a0 = this.b2 / this.a0;\n    this.a1a0 = this.a1 / this.a0;\n    this.a2a0 = this.a2 / this.a0;\n  };\n\n  this.process = function (buffer) {\n    //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n    //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n    var len = buffer.length;\n    var output = new Float64Array(len);\n\n    for (var i = 0; i < buffer.length; i++) {\n      output[i] = this.b0a0 * buffer[i] + this.b1a0 * this.x_1_l + this.b2a0 * this.x_2_l - this.a1a0 * this.y_1_l - this.a2a0 * this.y_2_l;\n      this.y_2_l = this.y_1_l;\n      this.y_1_l = output[i];\n      this.x_2_l = this.x_1_l;\n      this.x_1_l = buffer[i];\n    }\n\n    return output;\n  };\n\n  this.processStereo = function (buffer) {\n    //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n    //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n    var len = buffer.length;\n    var output = new Float64Array(len);\n\n    for (var i = 0; i < len / 2; i++) {\n      output[2 * i] = this.b0a0 * buffer[2 * i] + this.b1a0 * this.x_1_l + this.b2a0 * this.x_2_l - this.a1a0 * this.y_1_l - this.a2a0 * this.y_2_l;\n      this.y_2_l = this.y_1_l;\n      this.y_1_l = output[2 * i];\n      this.x_2_l = this.x_1_l;\n      this.x_1_l = buffer[2 * i];\n      output[2 * i + 1] = this.b0a0 * buffer[2 * i + 1] + this.b1a0 * this.x_1_r + this.b2a0 * this.x_2_r - this.a1a0 * this.y_1_r - this.a2a0 * this.y_2_r;\n      this.y_2_r = this.y_1_r;\n      this.y_1_r = output[2 * i + 1];\n      this.x_2_r = this.x_1_r;\n      this.x_1_r = buffer[2 * i + 1];\n    }\n\n    return output;\n  };\n}\n/* \n *  Magnitude to decibels\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  @buffer array of magnitudes to convert to decibels\n *\n *  @returns the array in decibels\n *\n */\n\n\nDSP.mag2db = function (buffer) {\n  var minDb = -120;\n  var minMag = Math.pow(10.0, minDb / 20.0);\n  var log = Math.log;\n  var max = Math.max;\n  var result = Float64Array(buffer.length);\n\n  for (var i = 0; i < buffer.length; i++) {\n    result[i] = 20.0 * log(max(buffer[i], minMag));\n  }\n\n  return result;\n};\n/* \n *  Frequency response\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  Calculates the frequency response at the given points.\n *\n *  @b b coefficients of the filter\n *  @a a coefficients of the filter\n *  @w w points (normally between -PI and PI) where to calculate the frequency response\n *\n *  @returns the frequency response in magnitude\n *\n */\n\n\nDSP.freqz = function (b, a, w) {\n  var i, j;\n\n  if (!w) {\n    w = Float64Array(200);\n\n    for (i = 0; i < w.length; i++) {\n      w[i] = DSP.TWO_PI / w.length * i - Math.PI;\n    }\n  }\n\n  var result = Float64Array(w.length);\n  var sqrt = Math.sqrt;\n  var cos = Math.cos;\n  var sin = Math.sin;\n\n  for (i = 0; i < w.length; i++) {\n    var numerator = {\n      real: 0.0,\n      imag: 0.0\n    };\n\n    for (j = 0; j < b.length; j++) {\n      numerator.real += b[j] * cos(-j * w[i]);\n      numerator.imag += b[j] * sin(-j * w[i]);\n    }\n\n    var denominator = {\n      real: 0.0,\n      imag: 0.0\n    };\n\n    for (j = 0; j < a.length; j++) {\n      denominator.real += a[j] * cos(-j * w[i]);\n      denominator.imag += a[j] * sin(-j * w[i]);\n    }\n\n    result[i] = sqrt(numerator.real * numerator.real + numerator.imag * numerator.imag) / sqrt(denominator.real * denominator.real + denominator.imag * denominator.imag);\n  }\n\n  return result;\n};\n/* \n *  Graphical Equalizer\n *\n *  Implementation of a graphic equalizer with a configurable bands-per-octave\n *  and minimum and maximum frequencies\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\n\n\nfunction GraphicalEq(sampleRate) {\n  this.FS = sampleRate;\n  this.minFreq = 40.0;\n  this.maxFreq = 16000.0;\n  this.bandsPerOctave = 1.0;\n  this.filters = [];\n  this.freqzs = [];\n  this.calculateFreqzs = true;\n\n  this.recalculateFilters = function () {\n    var bandCount = Math.round(Math.log(this.maxFreq / this.minFreq) * this.bandsPerOctave / Math.LN2);\n    this.filters = [];\n\n    for (var i = 0; i < bandCount; i++) {\n      var freq = this.minFreq * Math.pow(2, i / this.bandsPerOctave);\n      var newFilter = new Biquad(DSP.PEAKING_EQ, this.FS);\n      newFilter.setDbGain(0);\n      newFilter.setBW(1 / this.bandsPerOctave);\n      newFilter.setF0(freq);\n      this.filters[i] = newFilter;\n      this.recalculateFreqz(i);\n    }\n  };\n\n  this.setMinimumFrequency = function (freq) {\n    this.minFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setMaximumFrequency = function (freq) {\n    this.maxFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setBandsPerOctave = function (bands) {\n    this.bandsPerOctave = bands;\n    this.recalculateFilters();\n  };\n\n  this.setBandGain = function (bandIndex, gain) {\n    if (bandIndex < 0 || bandIndex > this.filters.length - 1) {\n      throw \"The band index of the graphical equalizer is out of bounds.\";\n    }\n\n    if (!gain) {\n      throw \"A gain must be passed.\";\n    }\n\n    this.filters[bandIndex].setDbGain(gain);\n    this.recalculateFreqz(bandIndex);\n  };\n\n  this.recalculateFreqz = function (bandIndex) {\n    if (!this.calculateFreqzs) {\n      return;\n    }\n\n    if (bandIndex < 0 || bandIndex > this.filters.length - 1) {\n      throw \"The band index of the graphical equalizer is out of bounds. \" + bandIndex + \" is out of [\" + 0 + \", \" + this.filters.length - 1 + \"]\";\n    }\n\n    if (!this.w) {\n      this.w = Float64Array(400);\n\n      for (var i = 0; i < this.w.length; i++) {\n        this.w[i] = Math.PI / this.w.length * i;\n      }\n    }\n\n    var b = [this.filters[bandIndex].b0, this.filters[bandIndex].b1, this.filters[bandIndex].b2];\n    var a = [this.filters[bandIndex].a0, this.filters[bandIndex].a1, this.filters[bandIndex].a2];\n    this.freqzs[bandIndex] = DSP.mag2db(DSP.freqz(b, a, this.w));\n  };\n\n  this.process = function (buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].process(output);\n    }\n\n    return output;\n  };\n\n  this.processStereo = function (buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].processStereo(output);\n    }\n\n    return output;\n  };\n}\n/**\n * MultiDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/delay-firefox-audio-api/\n *\n * This is a delay that feeds it's own delayed signal back into its circular\n * buffer. Also known as a CombFilter.\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\n\n\nfunction MultiDelay(maxDelayInSamplesSize, delayInSamples, masterVolume, delayVolume) {\n  this.delayBufferSamples = new Float64Array(maxDelayInSamplesSize); // The maximum size of delay\n\n  this.delayInputPointer = delayInSamples;\n  this.delayOutputPointer = 0;\n  this.delayInSamples = delayInSamples;\n  this.masterVolume = masterVolume;\n  this.delayVolume = delayVolume;\n}\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\n\n\nMultiDelay.prototype.setDelayInSamples = function (delayInSamples) {\n  this.delayInSamples = delayInSamples;\n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length;\n  }\n};\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nMultiDelay.prototype.setMasterVolume = function (masterVolume) {\n  this.masterVolume = masterVolume;\n};\n/**\n * Change the delay feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nMultiDelay.prototype.setDelayVolume = function (delayVolume) {\n  this.delayVolume = delayVolume;\n};\n/**\n * Process a given interleaved or mono non-interleaved float value Array and adds the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved or mono non-interleaved as was fed to this function.\n */\n\n\nMultiDelay.prototype.process = function (samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(samples.length);\n\n  for (var i = 0; i < samples.length; i++) {\n    // delayBufferSamples could contain initial NULL's, return silence in that case\n    var delaySample = this.delayBufferSamples[this.delayOutputPointer] === null ? 0.0 : this.delayBufferSamples[this.delayOutputPointer]; // Mix normal audio data with delayed audio\n\n    var sample = delaySample * this.delayVolume + samples[i]; // Add audio data with the delay in the delay buffer\n\n    this.delayBufferSamples[this.delayInputPointer] = sample; // Return the audio with delay mix\n\n    outputSamples[i] = sample * this.masterVolume; // Manage circulair delay buffer pointers\n\n    this.delayInputPointer++;\n\n    if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {\n      this.delayInputPointer = 0;\n    }\n\n    this.delayOutputPointer++;\n\n    if (this.delayOutputPointer >= this.delayBufferSamples.length - 1) {\n      this.delayOutputPointer = 0;\n    }\n  }\n\n  return outputSamples;\n};\n/**\n * SingleDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: See usage in Reverb class\n *\n * This is a delay that does NOT feeds it's own delayed signal back into its \n * circular buffer, neither does it return the original signal. Also known as\n * an AllPassFilter(?).\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\n\n\nfunction SingleDelay(maxDelayInSamplesSize, delayInSamples, delayVolume) {\n  this.delayBufferSamples = new Float64Array(maxDelayInSamplesSize); // The maximum size of delay\n\n  this.delayInputPointer = delayInSamples;\n  this.delayOutputPointer = 0;\n  this.delayInSamples = delayInSamples;\n  this.delayVolume = delayVolume;\n}\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\n\n\nSingleDelay.prototype.setDelayInSamples = function (delayInSamples) {\n  this.delayInSamples = delayInSamples;\n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length;\n  }\n};\n/**\n * Change the return signal volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nSingleDelay.prototype.setDelayVolume = function (delayVolume) {\n  this.delayVolume = delayVolume;\n};\n/**\n * Process a given interleaved or mono non-interleaved float value Array and\n * returns the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved or mono non-interleaved as was fed to this function.\n */\n\n\nSingleDelay.prototype.process = function (samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(samples.length);\n\n  for (var i = 0; i < samples.length; i++) {\n    // Add audio data with the delay in the delay buffer\n    this.delayBufferSamples[this.delayInputPointer] = samples[i]; // delayBufferSamples could contain initial NULL's, return silence in that case\n\n    var delaySample = this.delayBufferSamples[this.delayOutputPointer]; // Return the audio with delay mix\n\n    outputSamples[i] = delaySample * this.delayVolume; // Manage circulair delay buffer pointers\n\n    this.delayInputPointer++;\n\n    if (this.delayInputPointer >= this.delayBufferSamples.length - 1) {\n      this.delayInputPointer = 0;\n    }\n\n    this.delayOutputPointer++;\n\n    if (this.delayOutputPointer >= this.delayBufferSamples.length - 1) {\n      this.delayOutputPointer = 0;\n    }\n  }\n\n  return outputSamples;\n};\n/**\n * Reverb effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/reverb-firefox-audio-api/\n *\n * This reverb consists of 6 SingleDelays, 6 MultiDelays and an IIRFilter2\n * for each of the two stereo channels.\n *\n * Compatible with interleaved stereo buffers only!\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffers)\n * @param {Number} delayInSamples Initial delay in samples for internal (Single/Multi)delays\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} mixVolume Initial reverb signal mix volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume for internal (Single/Multi)delays. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} dampFrequency Initial low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n *\n * @constructor\n */\n\n\nfunction Reverb(maxDelayInSamplesSize, delayInSamples, masterVolume, mixVolume, delayVolume, dampFrequency) {\n  this.delayInSamples = delayInSamples;\n  this.masterVolume = masterVolume;\n  this.mixVolume = mixVolume;\n  this.delayVolume = delayVolume;\n  this.dampFrequency = dampFrequency;\n  this.NR_OF_MULTIDELAYS = 6;\n  this.NR_OF_SINGLEDELAYS = 6;\n  this.LOWPASSL = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n  this.LOWPASSR = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n  this.singleDelays = [];\n  var i, delayMultiply;\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + i / 7.0; // 1.0, 1.1, 1.2...\n\n    this.singleDelays[i] = new SingleDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.delayVolume);\n  }\n\n  this.multiDelays = [];\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + i / 10.0; // 1.0, 1.1, 1.2... \n\n    this.multiDelays[i] = new MultiDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.masterVolume, this.delayVolume);\n  }\n}\n/**\n * Change the delay time in samples as a base for all delays.\n *\n * @param {Number} delayInSamples Delay in samples\n */\n\n\nReverb.prototype.setDelayInSamples = function (delayInSamples) {\n  this.delayInSamples = delayInSamples;\n  var i, delayMultiply;\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + i / 7.0; // 1.0, 1.1, 1.2...\n\n    this.singleDelays[i].setDelayInSamples(Math.round(this.delayInSamples * delayMultiply));\n  }\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + i / 10.0; // 1.0, 1.1, 1.2...\n\n    this.multiDelays[i].setDelayInSamples(Math.round(this.delayInSamples * delayMultiply));\n  }\n};\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nReverb.prototype.setMasterVolume = function (masterVolume) {\n  this.masterVolume = masterVolume;\n};\n/**\n * Change the reverb signal mix level.\n *\n * @param {Number} mixVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nReverb.prototype.setMixVolume = function (mixVolume) {\n  this.mixVolume = mixVolume;\n};\n/**\n * Change all delays feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\n\n\nReverb.prototype.setDelayVolume = function (delayVolume) {\n  this.delayVolume = delayVolume;\n  var i;\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    this.singleDelays[i].setDelayVolume(this.delayVolume);\n  }\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    this.multiDelays[i].setDelayVolume(this.delayVolume);\n  }\n};\n/**\n * Change the Low Pass filter frequency.\n *\n * @param {Number} dampFrequency low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n */\n\n\nReverb.prototype.setDampFrequency = function (dampFrequency) {\n  this.dampFrequency = dampFrequency;\n  this.LOWPASSL.set(dampFrequency, 0);\n  this.LOWPASSR.set(dampFrequency, 0);\n};\n/**\n * Process a given interleaved float value Array and copies and adds the reverb signal.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved buffer.\n */\n\n\nReverb.prototype.process = function (interleavedSamples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(interleavedSamples.length); // Perform low pass on the input samples to mimick damp\n\n  var leftRightMix = DSP.deinterleave(interleavedSamples);\n  this.LOWPASSL.process(leftRightMix[DSP.LEFT]);\n  this.LOWPASSR.process(leftRightMix[DSP.RIGHT]);\n  var filteredSamples = DSP.interleave(leftRightMix[DSP.LEFT], leftRightMix[DSP.RIGHT]);\n  var i; // Process MultiDelays in parallel\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    // Invert the signal of every even multiDelay\n    outputSamples = DSP.mixSampleBuffers(outputSamples, this.multiDelays[i].process(filteredSamples), 2 % i === 0, this.NR_OF_MULTIDELAYS);\n  } // Process SingleDelays in series\n\n\n  var singleDelaySamples = new Float64Array(outputSamples.length);\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    // Invert the signal of every even singleDelay\n    singleDelaySamples = DSP.mixSampleBuffers(singleDelaySamples, this.singleDelays[i].process(outputSamples), 2 % i === 0, 1);\n  } // Apply the volume of the reverb signal\n\n\n  for (i = 0; i < singleDelaySamples.length; i++) {\n    singleDelaySamples[i] *= this.mixVolume;\n  } // Mix the original signal with the reverb signal\n\n\n  outputSamples = DSP.mixSampleBuffers(singleDelaySamples, interleavedSamples, 0, 1); // Apply the master volume to the complete signal\n\n  for (i = 0; i < outputSamples.length; i++) {\n    outputSamples[i] *= this.masterVolume;\n  }\n\n  return outputSamples;\n};\n\nif (module && typeof module.exports !== 'undefined') {\n  module.exports = {\n    DSP: DSP,\n    DFT: DFT,\n    FFT: FFT,\n    RFFT: RFFT,\n    Sampler: Sampler,\n    Oscillator: Oscillator,\n    ADSR: ADSR,\n    IIRFilter: IIRFilter,\n    IIRFilter2: IIRFilter2,\n    WindowFunction: WindowFunction,\n    sinh: sinh,\n    Biquad: Biquad,\n    GraphicalEq: GraphicalEq,\n    MultiDelay: MultiDelay,\n    SingleDelay: SingleDelay,\n    Reverb: Reverb\n  };\n}","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/node_modules/dsp.js/dsp.js"],"names":["DSP","LEFT","RIGHT","MIX","SINE","TRIANGLE","SAW","SQUARE","LOWPASS","HIGHPASS","BANDPASS","NOTCH","BARTLETT","BARTLETTHANN","BLACKMAN","COSINE","GAUSS","HAMMING","HANN","LANCZOS","RECTANGULAR","TRIANGULAR","OFF","FW","BW","FWBW","TWO_PI","Math","PI","setupTypedArray","name","fallback","obj","Array","invert","buffer","i","len","length","interleave","left","right","stereoInterleaved","Float64Array","deinterleave","mix","deinterleaveChannel","channel","getChannel","mixSampleBuffers","sampleBuffer1","sampleBuffer2","negate","volumeCorrection","outputSamples","LPF","HPF","BPF_CONSTANT_SKIRT","BPF_CONSTANT_PEAK","APF","PEAKING_EQ","LOW_SHELF","HIGH_SHELF","Q","S","RMS","total","n","sqrt","Peak","peak","abs","FourierTransform","bufferSize","sampleRate","bandwidth","spectrum","real","imag","peakBand","getBandFrequency","index","calculateSpectrum","bSi","rval","ival","mag","N","DFT","call","sinTable","cosTable","sin","cos","prototype","forward","k","FFT","reverseTable","Uint32Array","limit","bit","floor","log","LN2","pow","halfSize","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","fftStep","inverse","revReal","revImag","RFFT","trans","reverseBinPermute","dest","source","nm1","r","h","generateReverseTable","x","n2","n4","n8","nn","t1","t2","t3","t4","i1","i2","i3","i4","i5","i6","i7","i8","st1","cc1","ss1","cc3","ss3","e","a","ix","id","i0","SQRT1_2","j","Sampler","file","playStart","playEnd","loopStart","loopEnd","loopMode","loaded","samples","signal","frameCount","envelope","amplitude","rootFrequency","frequency","step","duration","samplesProcessed","playhead","audio","document","createElement","self","loadSamples","event","frameBuffer","push","loadComplete","loadMetaData","addEventListener","muted","src","play","applyEnvelope","process","generate","frameOffset","loopWidth","playStartSamples","playEndSamples","offset","round","setFreq","totalProcessed","reset","Oscillator","type","waveTableLength","cyclesPerSample","parseInt","func","Triangle","Saw","Square","Sine","generateWaveTable","waveTable","waveTableTime","waveTableHz","setAmp","add","oscillator","addSignal","addEnvelope","valueAt","Pulse","ADSR","attackLength","decayLength","sustainLevel","sustainLength","releaseLength","attackSamples","decaySamples","sustainSamples","releaseSamples","update","attack","decay","sustain","release","noteOn","noteOff","processSample","sample","value","isActive","disable","IIRFilter","cutoff","resonance","LP12","__defineGetter__","set","calcCoeff","vibraPos","vibraSpeed","w","q","c","IIRFilter2","f","freq","min","damp","input","output","WindowFunction","alpha","Bartlett","BartlettHann","Blackman","Cosine","Gauss","Hamming","Hann","Lanczoz","Rectangular","Triangular","a0","a1","a2","E","Lanczos","sinh","arg","exp","Biquad","Fs","parameterType","x_1_l","x_2_l","y_1_l","y_2_l","x_1_r","x_2_r","y_1_r","y_2_r","b0","b1","b2","b0a0","b1a0","b2a0","a1a0","a2a0","f0","dBgain","coefficients","b","setFilterType","recalculateCoefficients","setSampleRate","rate","setQ","max","setBW","bw","setS","s","setF0","setDbGain","g","A","w0","cosw0","sinw0","coeff","processStereo","mag2db","minDb","minMag","result","freqz","numerator","denominator","GraphicalEq","FS","minFreq","maxFreq","bandsPerOctave","filters","freqzs","calculateFreqzs","recalculateFilters","bandCount","newFilter","recalculateFreqz","setMinimumFrequency","setMaximumFrequency","setBandsPerOctave","bands","setBandGain","bandIndex","gain","MultiDelay","maxDelayInSamplesSize","delayInSamples","masterVolume","delayVolume","delayBufferSamples","delayInputPointer","delayOutputPointer","setDelayInSamples","setMasterVolume","setDelayVolume","delaySample","SingleDelay","Reverb","mixVolume","dampFrequency","NR_OF_MULTIDELAYS","NR_OF_SINGLEDELAYS","LOWPASSL","LOWPASSR","singleDelays","delayMultiply","multiDelays","setMixVolume","setDampFrequency","interleavedSamples","leftRightMix","filteredSamples","singleDelaySamples","module","exports"],"mappings":"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","sourcesContent":["/* \n *  DSP.js - a comprehensive digital signal processing  library for javascript\n * \n *  Created by Corban Brook <corbanbrook@gmail.com> on 2010-01-01.\n *  Copyright 2010 Corban Brook. All rights reserved.\n *\n */\n\n////////////////////////////////////////////////////////////////////////////////\n//                                  CONSTANTS                                 //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DSP is an object which contains general purpose utility functions and constants\n */\nvar DSP = {\n  // Channels\n  LEFT:           0,\n  RIGHT:          1,\n  MIX:            2,\n\n  // Waveforms\n  SINE:           1,\n  TRIANGLE:       2,\n  SAW:            3,\n  SQUARE:         4,\n\n  // Filters\n  LOWPASS:        0,\n  HIGHPASS:       1,\n  BANDPASS:       2,\n  NOTCH:          3,\n\n  // Window functions\n  BARTLETT:       1,\n  BARTLETTHANN:   2,\n  BLACKMAN:       3,\n  COSINE:         4,\n  GAUSS:          5,\n  HAMMING:        6,\n  HANN:           7,\n  LANCZOS:        8,\n  RECTANGULAR:    9,\n  TRIANGULAR:     10,\n\n  // Loop modes\n  OFF:            0,\n  FW:             1,\n  BW:             2,\n  FWBW:           3,\n\n  // Math\n  TWO_PI:         2*Math.PI\n};\n\n// Setup arrays for platforms which do not support byte arrays\nfunction setupTypedArray(name, fallback) {\n  // check if TypedArray exists\n  // typeof on Minefield and Chrome return function, typeof on Webkit returns object.\n  if (typeof this[name] !== \"function\" && typeof this[name] !== \"object\") {\n    // nope.. check if WebGLArray exists\n    if (typeof this[fallback] === \"function\" && typeof this[fallback] !== \"object\") {\n      this[name] = this[fallback];\n    } else {\n      // nope.. set as Native JS array\n      this[name] = function(obj) {\n        if (obj instanceof Array) {\n          return obj;\n        } else if (typeof obj === \"number\") {\n          return new Array(obj);\n        }\n      };\n    }\n  }\n}\n\nsetupTypedArray(\"Float64Array\", \"WebGLFloatArray\");\nsetupTypedArray(\"Int32Array\",   \"WebGLIntArray\");\nsetupTypedArray(\"Uint16Array\",  \"WebGLUnsignedShortArray\");\nsetupTypedArray(\"Uint8Array\",   \"WebGLUnsignedByteArray\");\n\n\n////////////////////////////////////////////////////////////////////////////////\n//                            DSP UTILITY FUNCTIONS                           //\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Inverts the phase of a signal\n *\n * @param {Array} buffer A sample buffer\n *\n * @returns The inverted sample buffer\n */\nDSP.invert = function(buffer) {\n  for (var i = 0, len = buffer.length; i < len; i++) {\n    buffer[i] *= -1;\n  }\n\n  return buffer;\n};\n\n/**\n * Converts split-stereo (dual mono) sample buffers into a stereo interleaved sample buffer\n *\n * @param {Array} left  A sample buffer\n * @param {Array} right A sample buffer\n *\n * @returns The stereo interleaved buffer\n */\nDSP.interleave = function(left, right) {\n  if (left.length !== right.length) {\n    throw \"Can not interleave. Channel lengths differ.\";\n  }\n \n  var stereoInterleaved = new Float64Array(left.length * 2);\n \n  for (var i = 0, len = left.length; i < len; i++) {\n    stereoInterleaved[2*i]   = left[i];\n    stereoInterleaved[2*i+1] = right[i];\n  }\n \n  return stereoInterleaved;\n};\n\n/**\n * Converts a stereo-interleaved sample buffer into split-stereo (dual mono) sample buffers\n *\n * @param {Array} buffer A stereo-interleaved sample buffer\n *\n * @returns an Array containing left and right channels\n */\nDSP.deinterleave = (function() {\n  var left, right, mix, deinterleaveChannel = []; \n\n  deinterleaveChannel[DSP.MIX] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      mix[i] = (buffer[2*i] + buffer[2*i+1]) / 2;\n    }\n    return mix;\n  };\n\n  deinterleaveChannel[DSP.LEFT] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      left[i]  = buffer[2*i];\n    }\n    return left;\n  };\n\n  deinterleaveChannel[DSP.RIGHT] = function(buffer) {\n    for (var i = 0, len = buffer.length/2; i < len; i++) {\n      right[i]  = buffer[2*i+1];\n    }\n    return right;\n  };\n\n  return function(channel, buffer) { \n    left  = left  || new Float64Array(buffer.length/2);\n    right = right || new Float64Array(buffer.length/2);\n    mix   = mix   || new Float64Array(buffer.length/2);\n\n    if (buffer.length/2 !== left.length) {\n      left  = new Float64Array(buffer.length/2);\n      right = new Float64Array(buffer.length/2);\n      mix   = new Float64Array(buffer.length/2);\n    }\n\n    return deinterleaveChannel[channel](buffer);\n  };\n}());\n\n/**\n * Separates a channel from a stereo-interleaved sample buffer\n *\n * @param {Array}  buffer A stereo-interleaved sample buffer\n * @param {Number} channel A channel constant (LEFT, RIGHT, MIX)\n *\n * @returns an Array containing a signal mono sample buffer\n */\nDSP.getChannel = DSP.deinterleave;\n\n/**\n * Helper method (for Reverb) to mix two (interleaved) samplebuffers. It's possible\n * to negate the second buffer while mixing and to perform a volume correction\n * on the final signal.\n *\n * @param {Array} sampleBuffer1 Array containing Float values or a Float64Array\n * @param {Array} sampleBuffer2 Array containing Float values or a Float64Array\n * @param {Boolean} negate When true inverts/flips the audio signal\n * @param {Number} volumeCorrection When you add multiple sample buffers, use this to tame your signal ;)\n *\n * @returns A new Float64Array interleaved buffer.\n */\nDSP.mixSampleBuffers = function(sampleBuffer1, sampleBuffer2, negate, volumeCorrection){\n  var outputSamples = new Float64Array(sampleBuffer1);\n\n  for(var i = 0; i<sampleBuffer1.length; i++){\n    outputSamples[i] += (negate ? -sampleBuffer2[i] : sampleBuffer2[i]) / volumeCorrection;\n  }\n \n  return outputSamples;\n}; \n\n// Biquad filter types\nDSP.LPF = 0;                // H(s) = 1 / (s^2 + s/Q + 1)\nDSP.HPF = 1;                // H(s) = s^2 / (s^2 + s/Q + 1)\nDSP.BPF_CONSTANT_SKIRT = 2; // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\nDSP.BPF_CONSTANT_PEAK = 3;  // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\nDSP.NOTCH = 4;              // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\nDSP.APF = 5;                // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\nDSP.PEAKING_EQ = 6;         // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\nDSP.LOW_SHELF = 7;          // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\nDSP.HIGH_SHELF = 8;         // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n\n// Biquad filter parameter types\nDSP.Q = 1;\nDSP.BW = 2; // SHARED with BACKWARDS LOOP MODE\nDSP.S = 3;\n\n// Find RMS of signal\nDSP.RMS = function(buffer) {\n  var total = 0;\n  \n  for (var i = 0, n = buffer.length; i < n; i++) {\n    total += buffer[i] * buffer[i];\n  }\n  \n  return Math.sqrt(total / n);\n};\n\n// Find Peak of signal\nDSP.Peak = function(buffer) {\n  var peak = 0;\n  \n  for (var i = 0, n = buffer.length; i < n; i++) {\n    peak = (Math.abs(buffer[i]) > peak) ? Math.abs(buffer[i]) : peak; \n  }\n  \n  return peak;\n};\n\n// Fourier Transform Module used by DFT, FFT, RFFT\nfunction FourierTransform(bufferSize, sampleRate) {\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.bandwidth  = 2 / bufferSize * sampleRate / 2;\n\n  this.spectrum   = new Float64Array(bufferSize/2);\n  this.real       = new Float64Array(bufferSize);\n  this.imag       = new Float64Array(bufferSize);\n\n  this.peakBand   = 0;\n  this.peak       = 0;\n\n  /**\n   * Calculates the *middle* frequency of an FFT band.\n   *\n   * @param {Number} index The index of the FFT band.\n   *\n   * @returns The middle frequency in Hz.\n   */\n  this.getBandFrequency = function(index) {\n    return this.bandwidth * index + this.bandwidth / 2;\n  };\n\n  this.calculateSpectrum = function() {\n    var spectrum  = this.spectrum,\n        real      = this.real,\n        imag      = this.imag,\n        bSi       = 2 / this.bufferSize,\n        sqrt      = Math.sqrt,\n        rval, \n        ival,\n        mag;\n\n    for (var i = 0, N = bufferSize/2; i < N; i++) {\n      rval = real[i];\n      ival = imag[i];\n      mag = bSi * sqrt(rval * rval + ival * ival);\n\n      if (mag > this.peak) {\n        this.peakBand = i;\n        this.peak = mag;\n      }\n\n      spectrum[i] = mag;\n    }\n  };\n}\n\n/**\n * DFT is a class for calculating the Discrete Fourier Transform of a signal.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\nfunction DFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n\n  var N = bufferSize/2 * bufferSize;\n  var TWO_PI = 2 * Math.PI;\n\n  this.sinTable = new Float64Array(N);\n  this.cosTable = new Float64Array(N);\n\n  for (var i = 0; i < N; i++) {\n    this.sinTable[i] = Math.sin(i * TWO_PI / bufferSize);\n    this.cosTable[i] = Math.cos(i * TWO_PI / bufferSize);\n  }\n}\n\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer\n *\n * @returns The frequency spectrum array\n */\nDFT.prototype.forward = function(buffer) {\n  var real = this.real, \n      imag = this.imag,\n      rval,\n      ival;\n\n  for (var k = 0; k < this.bufferSize/2; k++) {\n    rval = 0.0;\n    ival = 0.0;\n\n    for (var n = 0; n < buffer.length; n++) {\n      rval += this.cosTable[k*n] * buffer[n];\n      ival += this.sinTable[k*n] * buffer[n];\n    }\n\n    real[k] = rval;\n    imag[k] = ival;\n  }\n\n  return this.calculateSpectrum();\n};\n\n\n/**\n * FFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\nfunction FFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n   \n  this.reverseTable = new Uint32Array(bufferSize);\n\n  var limit = 1;\n  var bit = bufferSize >> 1;\n\n  var i;\n\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i++) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n    }\n\n    limit = limit << 1;\n    bit = bit >> 1;\n  }\n\n  this.sinTable = new Float64Array(bufferSize);\n  this.cosTable = new Float64Array(bufferSize);\n\n  for (i = 0; i < bufferSize; i++) {\n    this.sinTable[i] = Math.sin(-Math.PI/i);\n    this.cosTable[i] = Math.cos(-Math.PI/i);\n  }\n}\n\n/**\n * Performs a forward transform on the sample buffer.\n * Converts a time domain signal to frequency domain spectra.\n *\n * @param {Array} buffer The sample buffer. Buffer Length must be power of 2\n *\n * @returns The frequency spectrum array\n */\nFFT.prototype.forward = function(buffer) {\n  // Locally scope variables for speed up\n  var bufferSize      = this.bufferSize,\n      cosTable        = this.cosTable,\n      sinTable        = this.sinTable,\n      reverseTable    = this.reverseTable,\n      real            = this.real,\n      imag            = this.imag,\n      spectrum        = this.spectrum;\n\n  var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n  if (Math.pow(2, k) !== bufferSize) { throw \"Invalid buffer size, must be a power of 2.\"; }\n  if (bufferSize !== buffer.length)  { throw \"Supplied buffer is not the same size as defined FFT. FFT Size: \" + bufferSize + \" Buffer Size: \" + buffer.length; }\n\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    real[i] = buffer[reverseTable[i]];\n    imag[i] = 0;\n  }\n\n  while (halfSize < bufferSize) {\n    //phaseShiftStepReal = Math.cos(-Math.PI/halfSize);\n    //phaseShiftStepImag = Math.sin(-Math.PI/halfSize);\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    \n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);\n        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);\n\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);\n      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  return this.calculateSpectrum();\n};\n\nFFT.prototype.inverse = function(real, imag) {\n  // Locally scope variables for speed up\n  var bufferSize      = this.bufferSize,\n      cosTable        = this.cosTable,\n      sinTable        = this.sinTable,\n      reverseTable    = this.reverseTable,\n      spectrum        = this.spectrum;\n     \n      real = real || this.real;\n      imag = imag || this.imag;\n\n  var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal,\n      i;\n\n  for (i = 0; i < bufferSize; i++) {\n    imag[i] *= -1;\n  }\n\n  var revReal = new Float64Array(bufferSize);\n  var revImag = new Float64Array(bufferSize);\n \n  for (i = 0; i < real.length; i++) {\n    revReal[i] = real[reverseTable[i]];\n    revImag[i] = imag[reverseTable[i]];\n  }\n \n  real = revReal;\n  imag = revImag;\n\n  while (halfSize < bufferSize) {\n    phaseShiftStepReal = cosTable[halfSize];\n    phaseShiftStepImag = sinTable[halfSize];\n    currentPhaseShiftReal = 1;\n    currentPhaseShiftImag = 0;\n\n    for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n      i = fftStep;\n\n      while (i < bufferSize) {\n        off = i + halfSize;\n        tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);\n        ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);\n\n        real[off] = real[i] - tr;\n        imag[off] = imag[i] - ti;\n        real[i] += tr;\n        imag[i] += ti;\n\n        i += halfSize << 1;\n      }\n\n      tmpReal = currentPhaseShiftReal;\n      currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);\n      currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);\n    }\n\n    halfSize = halfSize << 1;\n  }\n\n  var buffer = new Float64Array(bufferSize); // this should be reused instead\n  for (i = 0; i < bufferSize; i++) {\n    buffer[i] = real[i] / bufferSize;\n  }\n\n  return buffer;\n};\n\n/**\n * RFFT is a class for calculating the Discrete Fourier Transform of a signal\n * with the Fast Fourier Transform algorithm.\n *\n * This method currently only contains a forward transform but is highly optimized.\n *\n * @param {Number} bufferSize The size of the sample buffer to be computed. Must be power of 2\n * @param {Number} sampleRate The sampleRate of the buffer (eg. 44100)\n *\n * @constructor\n */\n\n// lookup tables don't really gain us any speed, but they do increase\n// cache footprint, so don't use them in here\n\n// also we don't use sepearate arrays for real/imaginary parts\n\n// this one a little more than twice as fast as the one in FFT\n// however I only did the forward transform\n\n// the rest of this was translated from C, see http://www.jjj.de/fxt/\n// this is the real split radix FFT\n\nfunction RFFT(bufferSize, sampleRate) {\n  FourierTransform.call(this, bufferSize, sampleRate);\n\n  this.trans = new Float64Array(bufferSize);\n\n  this.reverseTable = new Uint32Array(bufferSize);\n\n  // don't use a lookup table to do the permute, use this instead\n  this.reverseBinPermute = function (dest, source) {\n    var bufferSize  = this.bufferSize, \n        halfSize    = bufferSize >>> 1, \n        nm1         = bufferSize - 1, \n        i = 1, r = 0, h;\n\n    dest[0] = source[0];\n\n    do {\n      r += halfSize;\n      dest[i] = source[r];\n      dest[r] = source[i];\n      \n      i++;\n\n      h = halfSize << 1;\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) { \n        dest[i]     = source[r]; \n        dest[r]     = source[i];\n\n        dest[nm1-i] = source[nm1-r]; \n        dest[nm1-r] = source[nm1-i];\n      }\n      i++;\n    } while (i < halfSize);\n    dest[nm1] = source[nm1];\n  };\n\n  this.generateReverseTable = function () {\n    var bufferSize  = this.bufferSize, \n        halfSize    = bufferSize >>> 1, \n        nm1         = bufferSize - 1, \n        i = 1, r = 0, h;\n\n    this.reverseTable[0] = 0;\n\n    do {\n      r += halfSize;\n      \n      this.reverseTable[i] = r;\n      this.reverseTable[r] = i;\n\n      i++;\n\n      h = halfSize << 1;\n      while (h = h >> 1, !((r ^= h) & h));\n\n      if (r >= i) { \n        this.reverseTable[i] = r;\n        this.reverseTable[r] = i;\n\n        this.reverseTable[nm1-i] = nm1-r;\n        this.reverseTable[nm1-r] = nm1-i;\n      }\n      i++;\n    } while (i < halfSize);\n\n    this.reverseTable[nm1] = nm1;\n  };\n\n  this.generateReverseTable();\n}\n\n\n// Ordering of output:\n//\n// trans[0]     = re[0] (==zero frequency, purely real)\n// trans[1]     = re[1]\n//             ...\n// trans[n/2-1] = re[n/2-1]\n// trans[n/2]   = re[n/2]    (==nyquist frequency, purely real)\n//\n// trans[n/2+1] = im[n/2-1]\n// trans[n/2+2] = im[n/2-2]\n//             ...\n// trans[n-1]   = im[1] \n\nRFFT.prototype.forward = function(buffer) {\n  var n         = this.bufferSize, \n      spectrum  = this.spectrum,\n      x         = this.trans, \n      TWO_PI    = 2*Math.PI,\n      sqrt      = Math.sqrt,\n      i         = n >>> 1,\n      bSi       = 2 / n,\n      n2, n4, n8, nn, \n      t1, t2, t3, t4, \n      i1, i2, i3, i4, i5, i6, i7, i8, \n      st1, cc1, ss1, cc3, ss3,\n      e, \n      a,\n      rval, ival, mag; \n\n  this.reverseBinPermute(x, buffer);\n\n  /*\n  var reverseTable = this.reverseTable;\n\n  for (var k = 0, len = reverseTable.length; k < len; k++) {\n    x[k] = buffer[reverseTable[k]];\n  }\n  */\n\n  for (var ix = 0, id = 4; ix < n; id *= 4) {\n    for (var i0 = ix; i0 < n; i0 += id) {\n      //sumdiff(x[i0], x[i0+1]); // {a, b}  <--| {a+b, a-b}\n      st1 = x[i0] - x[i0+1];\n      x[i0] += x[i0+1];\n      x[i0+1] = st1;\n    } \n    ix = 2*(id-1);\n  }\n\n  n2 = 2;\n  nn = n >>> 1;\n\n  while((nn = nn >>> 1)) {\n    ix = 0;\n    n2 = n2 << 1;\n    id = n2 << 1;\n    n4 = n2 >>> 2;\n    n8 = n2 >>> 3;\n    do {\n      if(n4 !== 1) {\n        for(i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n     \n          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n          t1 = x[i3] + x[i4];\n          x[i4] -= x[i3];\n          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i3] = x[i1] - t1; \n          x[i1] += t1;\n     \n          i1 += n8;\n          i2 += n8;\n          i3 += n8;\n          i4 += n8;\n         \n          //sumdiff(x[i3], x[i4], t1, t2); // {s, d}  <--| {a+b, a-b}\n          t1 = x[i3] + x[i4];\n          t2 = x[i3] - x[i4];\n         \n          t1 = -t1 * Math.SQRT1_2;\n          t2 *= Math.SQRT1_2;\n     \n          // sumdiff(t1, x[i2], x[i4], x[i3]); // {s, d}  <--| {a+b, a-b}\n          st1 = x[i2];\n          x[i4] = t1 + st1; \n          x[i3] = t1 - st1;\n          \n          //sumdiff3(x[i1], t2, x[i2]); // {a, b, d} <--| {a+b, b, a-b}\n          x[i2] = x[i1] - t2;\n          x[i1] += t2;\n        }\n      } else {\n        for(i0 = ix; i0 < n; i0 += id) {\n          i1 = i0;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n     \n          //diffsum3_r(x[i3], x[i4], t1); // {a, b, s} <--| {a, b-a, a+b}\n          t1 = x[i3] + x[i4]; \n          x[i4] -= x[i3];\n          \n          //sumdiff3(x[i1], t1, x[i3]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i3] = x[i1] - t1; \n          x[i1] += t1;\n        }\n      }\n   \n      ix = (id << 1) - n2;\n      id = id << 2;\n    } while (ix < n);\n \n    e = TWO_PI / n2;\n\n    for (var j = 1; j < n8; j++) {\n      a = j * e;\n      ss1 = Math.sin(a);\n      cc1 = Math.cos(a);\n\n      //ss3 = sin(3*a); cc3 = cos(3*a);\n      cc3 = 4*cc1*(cc1*cc1-0.75);\n      ss3 = 4*ss1*(0.75-ss1*ss1);\n   \n      ix = 0; id = n2 << 1;\n      do {\n        for (i0 = ix; i0 < n; i0 += id) {\n          i1 = i0 + j;\n          i2 = i1 + n4;\n          i3 = i2 + n4;\n          i4 = i3 + n4;\n       \n          i5 = i0 + n4 - j;\n          i6 = i5 + n4;\n          i7 = i6 + n4;\n          i8 = i7 + n4;\n       \n          //cmult(c, s, x, y, &u, &v)\n          //cmult(cc1, ss1, x[i7], x[i3], t2, t1); // {u,v} <--| {x*c-y*s, x*s+y*c}\n          t2 = x[i7]*cc1 - x[i3]*ss1; \n          t1 = x[i7]*ss1 + x[i3]*cc1;\n          \n          //cmult(cc3, ss3, x[i8], x[i4], t4, t3);\n          t4 = x[i8]*cc3 - x[i4]*ss3; \n          t3 = x[i8]*ss3 + x[i4]*cc3;\n       \n          //sumdiff(t2, t4);   // {a, b} <--| {a+b, a-b}\n          st1 = t2 - t4;\n          t2 += t4;\n          t4 = st1;\n          \n          //sumdiff(t2, x[i6], x[i8], x[i3]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i6]; x[i8] = t2 + st1; x[i3] = t2 - st1;\n          x[i8] = t2 + x[i6]; \n          x[i3] = t2 - x[i6];\n         \n          //sumdiff_r(t1, t3); // {a, b} <--| {a+b, b-a}\n          st1 = t3 - t1;\n          t1 += t3;\n          t3 = st1;\n          \n          //sumdiff(t3, x[i2], x[i4], x[i7]); // {s, d}  <--| {a+b, a-b}\n          //st1 = x[i2]; x[i4] = t3 + st1; x[i7] = t3 - st1;\n          x[i4] = t3 + x[i2]; \n          x[i7] = t3 - x[i2];\n         \n          //sumdiff3(x[i1], t1, x[i6]);   // {a, b, d} <--| {a+b, b, a-b}\n          x[i6] = x[i1] - t1; \n          x[i1] += t1;\n          \n          //diffsum3_r(t4, x[i5], x[i2]); // {a, b, s} <--| {a, b-a, a+b}\n          x[i2] = t4 + x[i5]; \n          x[i5] -= t4;\n        }\n     \n        ix = (id << 1) - n2;\n        id = id << 2;\n   \n      } while (ix < n);\n    }\n  }\n\n  while (--i) {\n    rval = x[i];\n    ival = x[n-i-1];\n    mag = bSi * sqrt(rval * rval + ival * ival);\n\n    if (mag > this.peak) {\n      this.peakBand = i;\n      this.peak = mag;\n    }\n\n    spectrum[i] = mag;\n  }\n\n  spectrum[0] = bSi * x[0];\n\n  return spectrum;\n};\n\nfunction Sampler(file, bufferSize, sampleRate, playStart, playEnd, loopStart, loopEnd, loopMode) {\n  this.file = file;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.playStart  = playStart || 0; // 0%\n  this.playEnd    = playEnd   || 1; // 100%\n  this.loopStart  = loopStart || 0;\n  this.loopEnd    = loopEnd   || 1;\n  this.loopMode   = loopMode  || DSP.OFF;\n  this.loaded     = false;\n  this.samples    = [];\n  this.signal     = new Float64Array(bufferSize);\n  this.frameCount = 0;\n  this.envelope   = null;\n  this.amplitude  = 1;\n  this.rootFrequency = 110; // A2 110\n  this.frequency  = 550;\n  this.step       = this.frequency / this.rootFrequency;\n  this.duration   = 0;\n  this.samplesProcessed = 0;\n  this.playhead   = 0;\n \n  var audio = /* new Audio();*/ document.createElement(\"AUDIO\");\n  var self = this;\n \n  this.loadSamples = function(event) {\n    var buffer = DSP.getChannel(DSP.MIX, event.frameBuffer);\n    for ( var i = 0; i < buffer.length; i++) {\n      self.samples.push(buffer[i]);\n    }\n  };\n \n  this.loadComplete = function() {\n    // convert flexible js array into a fast typed array\n    self.samples = new Float64Array(self.samples);\n    self.loaded = true;\n  };\n \n  this.loadMetaData = function() {\n    self.duration = audio.duration;\n  };\n \n  audio.addEventListener(\"MozAudioAvailable\", this.loadSamples, false);\n  audio.addEventListener(\"loadedmetadata\", this.loadMetaData, false);\n  audio.addEventListener(\"ended\", this.loadComplete, false);\n  audio.muted = true;\n  audio.src = file;\n  audio.play();\n}\n\nSampler.prototype.applyEnvelope = function() {\n  this.envelope.process(this.signal);\n  return this.signal;\n};\n\nSampler.prototype.generate = function() {\n  var frameOffset = this.frameCount * this.bufferSize;\n \n  var loopWidth = this.playEnd * this.samples.length - this.playStart * this.samples.length;\n  var playStartSamples = this.playStart * this.samples.length; // ie 0.5 -> 50% of the length\n  var playEndSamples = this.playEnd * this.samples.length; // ie 0.5 -> 50% of the length\n  var offset;\n\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    switch (this.loopMode) {\n      case DSP.OFF:\n        this.playhead = Math.round(this.samplesProcessed * this.step + playStartSamples);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        } else {\n          this.signal[i] = 0;\n        }\n        break;\n     \n      case DSP.FW:\n        this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n       \n      case DSP.BW:\n        this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);\n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n       \n      case DSP.FWBW:\n        if ( Math.floor(this.samplesProcessed * this.step / loopWidth) % 2 === 0 ) {\n          this.playhead = Math.round((this.samplesProcessed * this.step) % loopWidth + playStartSamples);\n        } else {\n          this.playhead = playEndSamples - Math.round((this.samplesProcessed * this.step) % loopWidth);\n        }  \n        if (this.playhead < (this.playEnd * this.samples.length) ) {\n          this.signal[i] = this.samples[this.playhead] * this.amplitude;\n        }\n        break;\n    }\n    this.samplesProcessed++;\n  }\n\n  this.frameCount++;\n\n  return this.signal;\n};\n\nSampler.prototype.setFreq = function(frequency) {\n    var totalProcessed = this.samplesProcessed * this.step;\n    this.frequency = frequency;\n    this.step = this.frequency / this.rootFrequency;\n    this.samplesProcessed = Math.round(totalProcessed/this.step);\n};\n\nSampler.prototype.reset = function() {\n  this.samplesProcessed = 0;\n  this.playhead = 0;\n};\n\n/**\n * Oscillator class for generating and modifying signals\n *\n * @param {Number} type       A waveform constant (eg. DSP.SINE)\n * @param {Number} frequency  Initial frequency of the signal\n * @param {Number} amplitude  Initial amplitude of the signal\n * @param {Number} bufferSize Size of the sample buffer to generate\n * @param {Number} sampleRate The sample rate of the signal\n *\n * @contructor\n */\nfunction Oscillator(type, frequency, amplitude, bufferSize, sampleRate) {\n  this.frequency  = frequency;\n  this.amplitude  = amplitude;\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  //this.pulseWidth = pulseWidth;\n  this.frameCount = 0;\n \n  this.waveTableLength = 2048;\n\n  this.cyclesPerSample = frequency / sampleRate;\n\n  this.signal = new Float64Array(bufferSize);\n  this.envelope = null;\n\n  switch(parseInt(type, 10)) {\n    case DSP.TRIANGLE:\n      this.func = Oscillator.Triangle;\n      break;\n\n    case DSP.SAW:\n      this.func = Oscillator.Saw;\n      break;\n\n    case DSP.SQUARE:\n      this.func = Oscillator.Square;\n      break;\n\n    default:\n    case DSP.SINE:\n      this.func = Oscillator.Sine;\n      break;\n  }\n\n  this.generateWaveTable = function() {\n    Oscillator.waveTable[this.func] = new Float64Array(2048);\n    var waveTableTime = this.waveTableLength / this.sampleRate;\n    var waveTableHz = 1 / waveTableTime;\n\n    for (var i = 0; i < this.waveTableLength; i++) {\n      Oscillator.waveTable[this.func][i] = this.func(i * waveTableHz/this.sampleRate);\n    }\n  };\n\n  if ( typeof Oscillator.waveTable === 'undefined' ) {\n    Oscillator.waveTable = {};\n  }\n\n  if ( typeof Oscillator.waveTable[this.func] === 'undefined' ) {\n    this.generateWaveTable();\n  }\n \n  this.waveTable = Oscillator.waveTable[this.func];\n}\n\n/**\n * Set the amplitude of the signal\n *\n * @param {Number} amplitude The amplitude of the signal (between 0 and 1)\n */\nOscillator.prototype.setAmp = function(amplitude) {\n  if (amplitude >= 0 && amplitude <= 1) {\n    this.amplitude = amplitude;\n  } else {\n    throw \"Amplitude out of range (0..1).\";\n  }\n};\n  \n/**\n * Set the frequency of the signal\n *\n * @param {Number} frequency The frequency of the signal\n */  \nOscillator.prototype.setFreq = function(frequency) {\n  this.frequency = frequency;\n  this.cyclesPerSample = frequency / this.sampleRate;\n};\n     \n// Add an oscillator\nOscillator.prototype.add = function(oscillator) {\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    //this.signal[i] += oscillator.valueAt(i);\n    this.signal[i] += oscillator.signal[i];\n  }\n \n  return this.signal;\n};\n     \n// Add a signal to the current generated osc signal\nOscillator.prototype.addSignal = function(signal) {\n  for ( var i = 0; i < signal.length; i++ ) {\n    if ( i >= this.bufferSize ) {\n      break;\n    }\n    this.signal[i] += signal[i];\n   \n    /*\n    // Constrain amplitude\n    if ( this.signal[i] > 1 ) {\n      this.signal[i] = 1;\n    } else if ( this.signal[i] < -1 ) {\n      this.signal[i] = -1;\n    }\n    */\n  }\n  return this.signal;\n};\n     \n// Add an envelope to the oscillator\nOscillator.prototype.addEnvelope = function(envelope) {\n  this.envelope = envelope;\n};\n\nOscillator.prototype.applyEnvelope = function() {\n  this.envelope.process(this.signal);\n};\n     \nOscillator.prototype.valueAt = function(offset) {\n  return this.waveTable[offset % this.waveTableLength];\n};\n     \nOscillator.prototype.generate = function() {\n  var frameOffset = this.frameCount * this.bufferSize;\n  var step = this.waveTableLength * this.frequency / this.sampleRate;\n  var offset;\n\n  for ( var i = 0; i < this.bufferSize; i++ ) {\n    //var step = (frameOffset + i) * this.cyclesPerSample % 1;\n    //this.signal[i] = this.func(step) * this.amplitude;\n    //this.signal[i] = this.valueAt(Math.round((frameOffset + i) * step)) * this.amplitude;\n    offset = Math.round((frameOffset + i) * step);\n    this.signal[i] = this.waveTable[offset % this.waveTableLength] * this.amplitude;\n  }\n\n  this.frameCount++;\n\n  return this.signal;\n};\n\nOscillator.Sine = function(step) {\n  return Math.sin(DSP.TWO_PI * step);\n};\n\nOscillator.Square = function(step) {\n  return step < 0.5 ? 1 : -1;\n};\n\nOscillator.Saw = function(step) {\n  return 2 * (step - Math.round(step));\n};\n\nOscillator.Triangle = function(step) {\n  return 1 - 4 * Math.abs(Math.round(step) - step);\n};\n\nOscillator.Pulse = function(step) {\n  // stub\n};\n \nfunction ADSR(attackLength, decayLength, sustainLevel, sustainLength, releaseLength, sampleRate) {\n  this.sampleRate = sampleRate;\n  // Length in seconds\n  this.attackLength  = attackLength;\n  this.decayLength   = decayLength;\n  this.sustainLevel  = sustainLevel;\n  this.sustainLength = sustainLength;\n  this.releaseLength = releaseLength;\n  this.sampleRate    = sampleRate;\n \n  // Length in samples\n  this.attackSamples  = attackLength  * sampleRate;\n  this.decaySamples   = decayLength   * sampleRate;\n  this.sustainSamples = sustainLength * sampleRate;\n  this.releaseSamples = releaseLength * sampleRate;\n \n  // Updates the envelope sample positions\n  this.update = function() {\n    this.attack         =                this.attackSamples;\n    this.decay          = this.attack  + this.decaySamples;\n    this.sustain        = this.decay   + this.sustainSamples;\n    this.release        = this.sustain + this.releaseSamples;\n  };\n \n  this.update();\n \n  this.samplesProcessed = 0;\n}\n\nADSR.prototype.noteOn = function() {\n  this.samplesProcessed = 0;\n  this.sustainSamples = this.sustainLength * this.sampleRate;\n  this.update();\n};\n\n// Send a note off when using a sustain of infinity to let the envelope enter the release phase\nADSR.prototype.noteOff = function() {\n  this.sustainSamples = this.samplesProcessed - this.decaySamples;\n  this.update();\n};\n\nADSR.prototype.processSample = function(sample) {\n  var amplitude = 0;\n\n  if ( this.samplesProcessed <= this.attack ) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {\n    amplitude = this.sustainLevel;\n  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n \n  return sample * amplitude;\n};\n\nADSR.prototype.value = function() {\n  var amplitude = 0;\n\n  if ( this.samplesProcessed <= this.attack ) {\n    amplitude = 0 + (1 - 0) * ((this.samplesProcessed - 0) / (this.attack - 0));\n  } else if ( this.samplesProcessed > this.attack && this.samplesProcessed <= this.decay ) {\n    amplitude = 1 + (this.sustainLevel - 1) * ((this.samplesProcessed - this.attack) / (this.decay - this.attack));\n  } else if ( this.samplesProcessed > this.decay && this.samplesProcessed <= this.sustain ) {\n    amplitude = this.sustainLevel;\n  } else if ( this.samplesProcessed > this.sustain && this.samplesProcessed <= this.release ) {\n    amplitude = this.sustainLevel + (0 - this.sustainLevel) * ((this.samplesProcessed - this.sustain) / (this.release - this.sustain));\n  }\n \n  return amplitude;\n};\n     \nADSR.prototype.process = function(buffer) {\n  for ( var i = 0; i < buffer.length; i++ ) {\n    buffer[i] *= this.value();\n\n    this.samplesProcessed++;\n  }\n \n  return buffer;\n};\n     \n     \nADSR.prototype.isActive = function() {\n  if ( this.samplesProcessed > this.release || this.samplesProcessed === -1 ) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nADSR.prototype.disable = function() {\n  this.samplesProcessed = -1;\n};\n \nfunction IIRFilter(type, cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n\n  switch(type) {\n    case DSP.LOWPASS:\n    case DSP.LP12:\n      this.func = new IIRFilter.LP12(cutoff, resonance, sampleRate);\n      break;\n  }\n}\n\nIIRFilter.prototype.__defineGetter__('cutoff',\n  function() {\n    return this.func.cutoff;\n  }\n);\n\nIIRFilter.prototype.__defineGetter__('resonance',\n  function() {\n    return this.func.resonance;\n  }\n);\n\nIIRFilter.prototype.set = function(cutoff, resonance) {\n  this.func.calcCoeff(cutoff, resonance);\n};\n\nIIRFilter.prototype.process = function(buffer) {\n  this.func.process(buffer);\n};\n\n// Add an envelope to the filter\nIIRFilter.prototype.addEnvelope = function(envelope) {\n  if ( envelope instanceof ADSR ) {\n    this.func.addEnvelope(envelope);\n  } else {\n    throw \"Not an envelope.\";\n  }\n};\n\nIIRFilter.LP12 = function(cutoff, resonance, sampleRate) {\n  this.sampleRate = sampleRate;\n  this.vibraPos   = 0;\n  this.vibraSpeed = 0;\n  this.envelope = false;\n \n  this.calcCoeff = function(cutoff, resonance) {\n    this.w = 2.0 * Math.PI * cutoff / this.sampleRate;\n    this.q = 1.0 - this.w / (2.0 * (resonance + 0.5 / (1.0 + this.w)) + this.w - 2.0);\n    this.r = this.q * this.q;\n    this.c = this.r + 1.0 - 2.0 * Math.cos(this.w) * this.q;\n   \n    this.cutoff = cutoff;\n    this.resonance = resonance;\n  };\n\n  this.calcCoeff(cutoff, resonance);\n\n  this.process = function(buffer) {\n    for ( var i = 0; i < buffer.length; i++ ) {\n      this.vibraSpeed += (buffer[i] - this.vibraPos) * this.c;\n      this.vibraPos   += this.vibraSpeed;\n      this.vibraSpeed *= this.r;\n   \n      /*\n      var temp = this.vibraPos;\n     \n      if ( temp > 1.0 ) {\n        temp = 1.0;\n      } else if ( temp < -1.0 ) {\n        temp = -1.0;\n      } else if ( temp != temp ) {\n        temp = 1;\n      }\n     \n      buffer[i] = temp;\n      */\n\n      if (this.envelope) {\n        buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (this.vibraPos * this.envelope.value());\n        this.envelope.samplesProcessed++;\n      } else {\n        buffer[i] = this.vibraPos;\n      }\n    }\n  };\n}; \n\nIIRFilter.LP12.prototype.addEnvelope = function(envelope) {\n  this.envelope = envelope;\n};\n\nfunction IIRFilter2(type, cutoff, resonance, sampleRate) {\n  this.type = type;\n  this.cutoff = cutoff;\n  this.resonance = resonance;\n  this.sampleRate = sampleRate;\n\n  this.f = Float64Array(4);\n  this.f[0] = 0.0; // lp\n  this.f[1] = 0.0; // hp\n  this.f[2] = 0.0; // bp\n  this.f[3] = 0.0; // br \n \n  this.calcCoeff = function(cutoff, resonance) {\n    this.freq = 2 * Math.sin(Math.PI * Math.min(0.25, cutoff/(this.sampleRate*2)));  \n    this.damp = Math.min(2 * (1 - Math.pow(resonance, 0.25)), Math.min(2, 2/this.freq - this.freq * 0.5));\n  };\n\n  this.calcCoeff(cutoff, resonance);\n}\n\nIIRFilter2.prototype.process = function(buffer) {\n  var input, output;\n  var f = this.f;\n\n  for ( var i = 0; i < buffer.length; i++ ) {\n    input = buffer[i];\n\n    // first pass\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output = 0.5 * f[this.type];\n\n    // second pass\n    f[3] = input - this.damp * f[2];\n    f[0] = f[0] + this.freq * f[2];\n    f[1] = f[3] - f[0];\n    f[2] = this.freq * f[1] + f[2];\n    output += 0.5 * f[this.type];\n\n    if (this.envelope) {\n      buffer[i] = (buffer[i] * (1 - this.envelope.value())) + (output * this.envelope.value());\n      this.envelope.samplesProcessed++;\n    } else {\n      buffer[i] = output;\n    }\n  }\n};\n\nIIRFilter2.prototype.addEnvelope = function(envelope) {\n  if ( envelope instanceof ADSR ) {\n    this.envelope = envelope;\n  } else {\n    throw \"This is not an envelope.\";\n  }\n};\n\nIIRFilter2.prototype.set = function(cutoff, resonance) {\n  this.calcCoeff(cutoff, resonance);\n};\n\n\n\nfunction WindowFunction(type, alpha) {\n  this.alpha = alpha;\n \n  switch(type) {\n    case DSP.BARTLETT:\n      this.func = WindowFunction.Bartlett;\n      break;\n     \n    case DSP.BARTLETTHANN:\n      this.func = WindowFunction.BartlettHann;\n      break;\n     \n    case DSP.BLACKMAN:\n      this.func = WindowFunction.Blackman;\n      this.alpha = this.alpha || 0.16;\n      break;\n   \n    case DSP.COSINE:\n      this.func = WindowFunction.Cosine;\n      break;\n     \n    case DSP.GAUSS:\n      this.func = WindowFunction.Gauss;\n      this.alpha = this.alpha || 0.25;\n      break;\n     \n    case DSP.HAMMING:\n      this.func = WindowFunction.Hamming;\n      break;\n     \n    case DSP.HANN:\n      this.func = WindowFunction.Hann;\n      break;\n   \n    case DSP.LANCZOS:\n      this.func = WindowFunction.Lanczoz;\n      break;\n     \n    case DSP.RECTANGULAR:\n      this.func = WindowFunction.Rectangular;\n      break;\n     \n    case DSP.TRIANGULAR:\n      this.func = WindowFunction.Triangular;\n      break;\n  }\n}\n\nWindowFunction.prototype.process = function(buffer) {\n  var length = buffer.length;\n  for ( var i = 0; i < length; i++ ) {\n    buffer[i] *= this.func(length, i, this.alpha);\n  }\n  return buffer;\n};\n\nWindowFunction.Bartlett = function(length, index) {\n  return 2 / (length - 1) * ((length - 1) / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nWindowFunction.BartlettHann = function(length, index) {\n  return 0.62 - 0.48 * Math.abs(index / (length - 1) - 0.5) - 0.38 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Blackman = function(length, index, alpha) {\n  var a0 = (1 - alpha) / 2;\n  var a1 = 0.5;\n  var a2 = alpha / 2;\n\n  return a0 - a1 * Math.cos(DSP.TWO_PI * index / (length - 1)) + a2 * Math.cos(4 * Math.PI * index / (length - 1));\n};\n\nWindowFunction.Cosine = function(length, index) {\n  return Math.cos(Math.PI * index / (length - 1) - Math.PI / 2);\n};\n\nWindowFunction.Gauss = function(length, index, alpha) {\n  return Math.pow(Math.E, -0.5 * Math.pow((index - (length - 1) / 2) / (alpha * (length - 1) / 2), 2));\n};\n\nWindowFunction.Hamming = function(length, index) {\n  return 0.54 - 0.46 * Math.cos(DSP.TWO_PI * index / (length - 1));\n};\n\nWindowFunction.Hann = function(length, index) {\n  return 0.5 * (1 - Math.cos(DSP.TWO_PI * index / (length - 1)));\n};\n\nWindowFunction.Lanczos = function(length, index) {\n  var x = 2 * index / (length - 1) - 1;\n  return Math.sin(Math.PI * x) / (Math.PI * x);\n};\n\nWindowFunction.Rectangular = function(length, index) {\n  return 1;\n};\n\nWindowFunction.Triangular = function(length, index) {\n  return 2 / length * (length / 2 - Math.abs(index - (length - 1) / 2));\n};\n\nfunction sinh (arg) {\n  // Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2 \n  //\n  // version: 1004.2314\n  // discuss at: http://phpjs.org/functions/sinh    // +   original by: Onno Marsman\n  // *     example 1: sinh(-0.9834330348825909);\n  // *     returns 1: -1.1497971402636502\n  return (Math.exp(arg) - Math.exp(-arg))/2;\n}\n\n/* \n *  Biquad filter\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\n// Implementation based on:\n// http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\nfunction Biquad(type, sampleRate) {\n  this.Fs = sampleRate;\n  this.type = type;  // type of the filter\n  this.parameterType = DSP.Q; // type of the parameter\n\n  this.x_1_l = 0;\n  this.x_2_l = 0;\n  this.y_1_l = 0;\n  this.y_2_l = 0;\n\n  this.x_1_r = 0;\n  this.x_2_r = 0;\n  this.y_1_r = 0;\n  this.y_2_r = 0;\n\n  this.b0 = 1;\n  this.a0 = 1;\n\n  this.b1 = 0;\n  this.a1 = 0;\n\n  this.b2 = 0;\n  this.a2 = 0;\n\n  this.b0a0 = this.b0 / this.a0;\n  this.b1a0 = this.b1 / this.a0;\n  this.b2a0 = this.b2 / this.a0;\n  this.a1a0 = this.a1 / this.a0;\n  this.a2a0 = this.a2 / this.a0;\n\n  this.f0 = 3000;   // \"wherever it's happenin', man.\"  Center Frequency or\n                    // Corner Frequency, or shelf midpoint frequency, depending\n                    // on which filter type.  The \"significant frequency\".\n\n  this.dBgain = 12; // used only for peaking and shelving filters\n\n  this.Q = 1;       // the EE kind of definition, except for peakingEQ in which A*Q is\n                    // the classic EE Q.  That adjustment in definition was made so that\n                    // a boost of N dB followed by a cut of N dB for identical Q and\n                    // f0/Fs results in a precisely flat unity gain filter or \"wire\".\n\n  this.BW = -3;     // the bandwidth in octaves (between -3 dB frequencies for BPF\n                    // and notch or between midpoint (dBgain/2) gain frequencies for\n                    // peaking EQ\n\n  this.S = 1;       // a \"shelf slope\" parameter (for shelving EQ only).  When S = 1,\n                    // the shelf slope is as steep as it can be and remain monotonically\n                    // increasing or decreasing gain with frequency.  The shelf slope, in\n                    // dB/octave, remains proportional to S for all other values for a\n                    // fixed f0/Fs and dBgain.\n\n  this.coefficients = function() {\n    var b = [this.b0, this.b1, this.b2];\n    var a = [this.a0, this.a1, this.a2];\n    return {b: b, a:a};\n  };\n\n  this.setFilterType = function(type) {\n    this.type = type;\n    this.recalculateCoefficients();\n  };\n\n  this.setSampleRate = function(rate) {\n    this.Fs = rate;\n    this.recalculateCoefficients();\n  };\n\n  this.setQ = function(q) {\n    this.parameterType = DSP.Q;\n    this.Q = Math.max(Math.min(q, 115.0), 0.001);\n    this.recalculateCoefficients();\n  };\n\n  this.setBW = function(bw) {\n    this.parameterType = DSP.BW;\n    this.BW = bw;\n    this.recalculateCoefficients();\n  };\n\n  this.setS = function(s) {\n    this.parameterType = DSP.S;\n    this.S = Math.max(Math.min(s, 5.0), 0.0001);\n    this.recalculateCoefficients();\n  };\n\n  this.setF0 = function(freq) {\n    this.f0 = freq;\n    this.recalculateCoefficients();\n  }; \n \n  this.setDbGain = function(g) {\n    this.dBgain = g;\n    this.recalculateCoefficients();\n  };\n\n  this.recalculateCoefficients = function() {\n    var A;\n    if (type === DSP.PEAKING_EQ || type === DSP.LOW_SHELF || type === DSP.HIGH_SHELF ) {\n      A = Math.pow(10, (this.dBgain/40));  // for peaking and shelving EQ filters only\n    } else {\n      A  = Math.sqrt( Math.pow(10, (this.dBgain/20)) );   \n    }\n\n    var w0 = DSP.TWO_PI * this.f0 / this.Fs;\n\n    var cosw0 = Math.cos(w0);\n    var sinw0 = Math.sin(w0);\n\n    var alpha = 0;\n   \n    switch (this.parameterType) {\n      case DSP.Q:\n        alpha = sinw0/(2*this.Q);\n        break;\n           \n      case DSP.BW:\n        alpha = sinw0 * sinh( Math.LN2/2 * this.BW * w0/sinw0 );\n        break;\n\n      case DSP.S:\n        alpha = sinw0/2 * Math.sqrt( (A + 1/A)*(1/this.S - 1) + 2 );\n        break;\n    }\n\n    /**\n        FYI: The relationship between bandwidth and Q is\n             1/Q = 2*sinh(ln(2)/2*BW*w0/sin(w0))     (digital filter w BLT)\n        or   1/Q = 2*sinh(ln(2)/2*BW)             (analog filter prototype)\n\n        The relationship between shelf slope and Q is\n             1/Q = sqrt((A + 1/A)*(1/S - 1) + 2)\n    */\n\n    var coeff;\n\n    switch (this.type) {\n      case DSP.LPF:       // H(s) = 1 / (s^2 + s/Q + 1)\n        this.b0 =  (1 - cosw0)/2;\n        this.b1 =   1 - cosw0;\n        this.b2 =  (1 - cosw0)/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2 * cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.HPF:       // H(s) = s^2 / (s^2 + s/Q + 1)\n        this.b0 =  (1 + cosw0)/2;\n        this.b1 = -(1 + cosw0);\n        this.b2 =  (1 + cosw0)/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2 * cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_SKIRT:       // H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\n        this.b0 =   sinw0/2;\n        this.b1 =   0;\n        this.b2 =  -sinw0/2;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.BPF_CONSTANT_PEAK:       // H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\n        this.b0 =   alpha;\n        this.b1 =   0;\n        this.b2 =  -alpha;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.NOTCH:     // H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\n        this.b0 =   1;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.APF:       // H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\n        this.b0 =   1 - alpha;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1 + alpha;\n        this.a0 =   1 + alpha;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha;\n        break;\n\n      case DSP.PEAKING_EQ:  // H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\n        this.b0 =   1 + alpha*A;\n        this.b1 =  -2*cosw0;\n        this.b2 =   1 - alpha*A;\n        this.a0 =   1 + alpha/A;\n        this.a1 =  -2*cosw0;\n        this.a2 =   1 - alpha/A;\n        break;\n\n      case DSP.LOW_SHELF:   // H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\n        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );\n        this.b0 =    A*((A+1) - (A-1)*cosw0 + coeff);\n        this.b1 =  2*A*((A-1) - (A+1)*cosw0);\n        this.b2 =    A*((A+1) - (A-1)*cosw0 - coeff);\n        this.a0 =       (A+1) + (A-1)*cosw0 + coeff;\n        this.a1 =   -2*((A-1) + (A+1)*cosw0);\n        this.a2 =       (A+1) + (A-1)*cosw0 - coeff;\n        break;\n\n      case DSP.HIGH_SHELF:   // H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\n        coeff = sinw0 * Math.sqrt( (A^2 + 1)*(1/this.S - 1) + 2*A );\n        this.b0 =    A*((A+1) + (A-1)*cosw0 + coeff);\n        this.b1 = -2*A*((A-1) + (A+1)*cosw0);\n        this.b2 =    A*((A+1) + (A-1)*cosw0 - coeff);\n        this.a0 =       (A+1) - (A-1)*cosw0 + coeff;\n        this.a1 =    2*((A-1) - (A+1)*cosw0);\n        this.a2 =       (A+1) - (A-1)*cosw0 - coeff;\n        break;\n    }\n   \n    this.b0a0 = this.b0/this.a0;\n    this.b1a0 = this.b1/this.a0;\n    this.b2a0 = this.b2/this.a0;\n    this.a1a0 = this.a1/this.a0;\n    this.a2a0 = this.a2/this.a0;\n  };\n\n  this.process = function(buffer) {\n      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n\n      var len = buffer.length;\n      var output = new Float64Array(len);\n\n      for ( var i=0; i<buffer.length; i++ ) {\n        output[i] = this.b0a0*buffer[i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;\n        this.y_2_l = this.y_1_l;\n        this.y_1_l = output[i];\n        this.x_2_l = this.x_1_l;\n        this.x_1_l = buffer[i];\n      }\n\n      return output;\n  };\n\n  this.processStereo = function(buffer) {\n      //y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\n      //       - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]\n\n      var len = buffer.length;\n      var output = new Float64Array(len);\n     \n      for (var i = 0; i < len/2; i++) {\n        output[2*i] = this.b0a0*buffer[2*i] + this.b1a0*this.x_1_l + this.b2a0*this.x_2_l - this.a1a0*this.y_1_l - this.a2a0*this.y_2_l;\n        this.y_2_l = this.y_1_l;\n        this.y_1_l = output[2*i];\n        this.x_2_l = this.x_1_l;\n        this.x_1_l = buffer[2*i];\n\n        output[2*i+1] = this.b0a0*buffer[2*i+1] + this.b1a0*this.x_1_r + this.b2a0*this.x_2_r - this.a1a0*this.y_1_r - this.a2a0*this.y_2_r;\n        this.y_2_r = this.y_1_r;\n        this.y_1_r = output[2*i+1];\n        this.x_2_r = this.x_1_r;\n        this.x_1_r = buffer[2*i+1];\n      }\n\n      return output;\n  };\n}\n\n/* \n *  Magnitude to decibels\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  @buffer array of magnitudes to convert to decibels\n *\n *  @returns the array in decibels\n *\n */\nDSP.mag2db = function(buffer) {\n  var minDb = -120;\n  var minMag = Math.pow(10.0, minDb / 20.0);\n\n  var log = Math.log;\n  var max = Math.max;\n \n  var result = Float64Array(buffer.length);\n  for (var i=0; i<buffer.length; i++) {\n    result[i] = 20.0*log(max(buffer[i], minMag));\n  }\n\n  return result;\n};\n\n/* \n *  Frequency response\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n *  Calculates the frequency response at the given points.\n *\n *  @b b coefficients of the filter\n *  @a a coefficients of the filter\n *  @w w points (normally between -PI and PI) where to calculate the frequency response\n *\n *  @returns the frequency response in magnitude\n *\n */\nDSP.freqz = function(b, a, w) {\n  var i, j;\n\n  if (!w) {\n    w = Float64Array(200);\n    for (i=0;i<w.length; i++) {\n      w[i] = DSP.TWO_PI/w.length * i - Math.PI;\n    }\n  }\n\n  var result = Float64Array(w.length);\n \n  var sqrt = Math.sqrt;\n  var cos = Math.cos;\n  var sin = Math.sin;\n \n  for (i=0; i<w.length; i++) {\n    var numerator = {real:0.0, imag:0.0};\n    for (j=0; j<b.length; j++) {\n      numerator.real += b[j] * cos(-j*w[i]);\n      numerator.imag += b[j] * sin(-j*w[i]);\n    }\n\n    var denominator = {real:0.0, imag:0.0};\n    for (j=0; j<a.length; j++) {\n      denominator.real += a[j] * cos(-j*w[i]);\n      denominator.imag += a[j] * sin(-j*w[i]);\n    }\n \n    result[i] =  sqrt(numerator.real*numerator.real + numerator.imag*numerator.imag) / sqrt(denominator.real*denominator.real + denominator.imag*denominator.imag);\n  }\n\n  return result;\n};\n\n/* \n *  Graphical Equalizer\n *\n *  Implementation of a graphic equalizer with a configurable bands-per-octave\n *  and minimum and maximum frequencies\n * \n *  Created by Ricard Marxer <email@ricardmarxer.com> on 2010-05-23.\n *  Copyright 2010 Ricard Marxer. All rights reserved.\n *\n */\nfunction GraphicalEq(sampleRate) {\n  this.FS = sampleRate;\n  this.minFreq = 40.0;\n  this.maxFreq = 16000.0;\n\n  this.bandsPerOctave = 1.0;\n\n  this.filters = [];\n  this.freqzs = [];\n\n  this.calculateFreqzs = true;\n\n  this.recalculateFilters = function() {\n    var bandCount = Math.round(Math.log(this.maxFreq/this.minFreq) * this.bandsPerOctave/ Math.LN2);\n\n    this.filters = [];\n    for (var i=0; i<bandCount; i++) {\n      var freq = this.minFreq*(Math.pow(2, i/this.bandsPerOctave));\n      var newFilter = new Biquad(DSP.PEAKING_EQ, this.FS);\n      newFilter.setDbGain(0);\n      newFilter.setBW(1/this.bandsPerOctave);\n      newFilter.setF0(freq);\n      this.filters[i] = newFilter;\n      this.recalculateFreqz(i);\n    }\n  };\n\n  this.setMinimumFrequency = function(freq) {\n    this.minFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setMaximumFrequency = function(freq) {\n    this.maxFreq = freq;\n    this.recalculateFilters();\n  };\n\n  this.setBandsPerOctave = function(bands) {\n    this.bandsPerOctave = bands;\n    this.recalculateFilters();\n  };\n\n  this.setBandGain = function(bandIndex, gain) {\n    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {\n      throw \"The band index of the graphical equalizer is out of bounds.\";\n    }\n\n    if (!gain) {\n      throw \"A gain must be passed.\";\n    }\n   \n    this.filters[bandIndex].setDbGain(gain);\n    this.recalculateFreqz(bandIndex);\n  };\n \n  this.recalculateFreqz = function(bandIndex) {\n    if (!this.calculateFreqzs) {\n      return;\n    }\n\n    if (bandIndex < 0 || bandIndex > (this.filters.length-1)) {\n      throw \"The band index of the graphical equalizer is out of bounds. \" + bandIndex + \" is out of [\" + 0 + \", \" + this.filters.length-1 + \"]\";\n    }\n       \n    if (!this.w) {\n      this.w = Float64Array(400);\n      for (var i=0; i<this.w.length; i++) {\n         this.w[i] = Math.PI/this.w.length * i;\n      }\n    }\n   \n    var b = [this.filters[bandIndex].b0, this.filters[bandIndex].b1, this.filters[bandIndex].b2];\n    var a = [this.filters[bandIndex].a0, this.filters[bandIndex].a1, this.filters[bandIndex].a2];\n\n    this.freqzs[bandIndex] = DSP.mag2db(DSP.freqz(b, a, this.w));\n  };\n\n  this.process = function(buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].process(output);\n    }\n\n    return output;\n  };\n\n  this.processStereo = function(buffer) {\n    var output = buffer;\n\n    for (var i = 0; i < this.filters.length; i++) {\n      output = this.filters[i].processStereo(output);\n    }\n\n    return output;\n  };\n}\n\n/**\n * MultiDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/delay-firefox-audio-api/\n *\n * This is a delay that feeds it's own delayed signal back into its circular\n * buffer. Also known as a CombFilter.\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\nfunction MultiDelay(maxDelayInSamplesSize, delayInSamples, masterVolume, delayVolume) {\n  this.delayBufferSamples   = new Float64Array(maxDelayInSamplesSize); // The maximum size of delay\n  this.delayInputPointer     = delayInSamples;\n  this.delayOutputPointer   = 0;\n \n  this.delayInSamples   = delayInSamples;\n  this.masterVolume     = masterVolume;\n  this.delayVolume     = delayVolume;\n}\n\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nMultiDelay.prototype.setDelayInSamples = function (delayInSamples) {\n  this.delayInSamples = delayInSamples;\n \n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; \n  }\n};\n\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nMultiDelay.prototype.setMasterVolume = function(masterVolume) {\n  this.masterVolume = masterVolume;\n};\n\n/**\n * Change the delay feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nMultiDelay.prototype.setDelayVolume = function(delayVolume) {\n  this.delayVolume = delayVolume;\n};\n\n/**\n * Process a given interleaved or mono non-interleaved float value Array and adds the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved or mono non-interleaved as was fed to this function.\n */\nMultiDelay.prototype.process = function(samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(samples.length);\n\n  for (var i=0; i<samples.length; i++) {\n    // delayBufferSamples could contain initial NULL's, return silence in that case\n    var delaySample = (this.delayBufferSamples[this.delayOutputPointer] === null ? 0.0 : this.delayBufferSamples[this.delayOutputPointer]);\n   \n    // Mix normal audio data with delayed audio\n    var sample = (delaySample * this.delayVolume) + samples[i];\n   \n    // Add audio data with the delay in the delay buffer\n    this.delayBufferSamples[this.delayInputPointer] = sample;\n   \n    // Return the audio with delay mix\n    outputSamples[i] = sample * this.masterVolume;\n   \n    // Manage circulair delay buffer pointers\n    this.delayInputPointer++;\n    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n      this.delayInputPointer = 0;\n    }\n     \n    this.delayOutputPointer++;\n    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {\n      this.delayOutputPointer = 0; \n    } \n  }\n \n  return outputSamples;\n};\n\n/**\n * SingleDelay effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: See usage in Reverb class\n *\n * This is a delay that does NOT feeds it's own delayed signal back into its \n * circular buffer, neither does it return the original signal. Also known as\n * an AllPassFilter(?).\n *\n * Compatible with interleaved stereo (or more channel) buffers and\n * non-interleaved mono buffers.\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffer)\n * @param {Number} delayInSamples Initial delay in samples\n * @param {Number} delayVolume Initial feedback delay volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n *\n * @constructor\n */\n\nfunction SingleDelay(maxDelayInSamplesSize, delayInSamples, delayVolume) {\n  this.delayBufferSamples = new Float64Array(maxDelayInSamplesSize); // The maximum size of delay\n  this.delayInputPointer  = delayInSamples;\n  this.delayOutputPointer = 0;\n \n  this.delayInSamples     = delayInSamples;\n  this.delayVolume        = delayVolume;\n}\n\n/**\n * Change the delay time in samples.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nSingleDelay.prototype.setDelayInSamples = function(delayInSamples) {\n  this.delayInSamples = delayInSamples;\n  this.delayInputPointer = this.delayOutputPointer + delayInSamples;\n\n  if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n    this.delayInputPointer = this.delayInputPointer - this.delayBufferSamples.length; \n  }\n};\n\n/**\n * Change the return signal volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nSingleDelay.prototype.setDelayVolume = function(delayVolume) {\n  this.delayVolume = delayVolume;\n};\n\n/**\n * Process a given interleaved or mono non-interleaved float value Array and\n * returns the delayed audio.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved or mono non-interleaved as was fed to this function.\n */\nSingleDelay.prototype.process = function(samples) {\n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(samples.length);\n\n  for (var i=0; i<samples.length; i++) {\n\n    // Add audio data with the delay in the delay buffer\n    this.delayBufferSamples[this.delayInputPointer] = samples[i];\n   \n    // delayBufferSamples could contain initial NULL's, return silence in that case\n    var delaySample = this.delayBufferSamples[this.delayOutputPointer];\n\n    // Return the audio with delay mix\n    outputSamples[i] = delaySample * this.delayVolume;\n\n    // Manage circulair delay buffer pointers\n    this.delayInputPointer++;\n\n    if (this.delayInputPointer >= this.delayBufferSamples.length-1) {\n      this.delayInputPointer = 0;\n    }\n     \n    this.delayOutputPointer++;\n\n    if (this.delayOutputPointer >= this.delayBufferSamples.length-1) {\n      this.delayOutputPointer = 0; \n    } \n  }\n \n  return outputSamples;\n};\n\n/**\n * Reverb effect by Almer Thie (http://code.almeros.com).\n * Copyright 2010 Almer Thie. All rights reserved.\n * Example: http://code.almeros.com/code-examples/reverb-firefox-audio-api/\n *\n * This reverb consists of 6 SingleDelays, 6 MultiDelays and an IIRFilter2\n * for each of the two stereo channels.\n *\n * Compatible with interleaved stereo buffers only!\n *\n * @param {Number} maxDelayInSamplesSize Maximum possible delay in samples (size of circular buffers)\n * @param {Number} delayInSamples Initial delay in samples for internal (Single/Multi)delays\n * @param {Number} masterVolume Initial master volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} mixVolume Initial reverb signal mix volume. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} delayVolume Initial feedback delay volume for internal (Single/Multi)delays. Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n * @param {Number} dampFrequency Initial low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n *\n * @constructor\n */\nfunction Reverb(maxDelayInSamplesSize, delayInSamples, masterVolume, mixVolume, delayVolume, dampFrequency) {\n  this.delayInSamples   = delayInSamples;\n  this.masterVolume     = masterVolume;\n  this.mixVolume       = mixVolume;\n  this.delayVolume     = delayVolume;\n  this.dampFrequency     = dampFrequency;\n \n  this.NR_OF_MULTIDELAYS = 6;\n  this.NR_OF_SINGLEDELAYS = 6;\n \n  this.LOWPASSL = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n  this.LOWPASSR = new IIRFilter2(DSP.LOWPASS, dampFrequency, 0, 44100);\n \n  this.singleDelays = [];\n  \n  var i, delayMultiply;\n\n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...\n    this.singleDelays[i] = new SingleDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.delayVolume);\n  }\n \n  this.multiDelays = [];\n\n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2... \n    this.multiDelays[i] = new MultiDelay(maxDelayInSamplesSize, Math.round(this.delayInSamples * delayMultiply), this.masterVolume, this.delayVolume);\n  }\n}\n\n/**\n * Change the delay time in samples as a base for all delays.\n *\n * @param {Number} delayInSamples Delay in samples\n */\nReverb.prototype.setDelayInSamples = function (delayInSamples){\n  this.delayInSamples = delayInSamples;\n\n  var i, delayMultiply;\n \n  for (i = 0; i < this.NR_OF_SINGLEDELAYS; i++) {\n    delayMultiply = 1.0 + (i/7.0); // 1.0, 1.1, 1.2...\n    this.singleDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );\n  }\n   \n  for (i = 0; i < this.NR_OF_MULTIDELAYS; i++) {\n    delayMultiply = 1.0 + (i/10.0); // 1.0, 1.1, 1.2...\n    this.multiDelays[i].setDelayInSamples( Math.round(this.delayInSamples * delayMultiply) );\n  }\n};\n\n/**\n * Change the master volume.\n *\n * @param {Number} masterVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setMasterVolume = function (masterVolume){\n  this.masterVolume = masterVolume;\n};\n\n/**\n * Change the reverb signal mix level.\n *\n * @param {Number} mixVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setMixVolume = function (mixVolume){\n  this.mixVolume = mixVolume;\n};\n\n/**\n * Change all delays feedback volume.\n *\n * @param {Number} delayVolume Float value: 0.0 (silence), 1.0 (normal), >1.0 (amplify)\n */\nReverb.prototype.setDelayVolume = function (delayVolume){\n  this.delayVolume = delayVolume;\n \n  var i;\n\n  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {\n    this.singleDelays[i].setDelayVolume(this.delayVolume);\n  } \n \n  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {\n    this.multiDelays[i].setDelayVolume(this.delayVolume);\n  } \n};\n\n/**\n * Change the Low Pass filter frequency.\n *\n * @param {Number} dampFrequency low pass filter frequency. 0 to 44100 (depending on your maximum sampling frequency)\n */\nReverb.prototype.setDampFrequency = function (dampFrequency){\n  this.dampFrequency = dampFrequency;\n \n  this.LOWPASSL.set(dampFrequency, 0);\n  this.LOWPASSR.set(dampFrequency, 0); \n};\n\n/**\n * Process a given interleaved float value Array and copies and adds the reverb signal.\n *\n * @param {Array} samples Array containing Float values or a Float64Array\n *\n * @returns A new Float64Array interleaved buffer.\n */\nReverb.prototype.process = function (interleavedSamples){ \n  // NB. Make a copy to put in the output samples to return.\n  var outputSamples = new Float64Array(interleavedSamples.length);\n \n  // Perform low pass on the input samples to mimick damp\n  var leftRightMix = DSP.deinterleave(interleavedSamples);\n  this.LOWPASSL.process( leftRightMix[DSP.LEFT] );\n  this.LOWPASSR.process( leftRightMix[DSP.RIGHT] ); \n  var filteredSamples = DSP.interleave(leftRightMix[DSP.LEFT], leftRightMix[DSP.RIGHT]);\n\n  var i;\n\n  // Process MultiDelays in parallel\n  for (i = 0; i<this.NR_OF_MULTIDELAYS; i++) {\n    // Invert the signal of every even multiDelay\n    outputSamples = DSP.mixSampleBuffers(outputSamples, this.multiDelays[i].process(filteredSamples), 2%i === 0, this.NR_OF_MULTIDELAYS);\n  }\n \n  // Process SingleDelays in series\n  var singleDelaySamples = new Float64Array(outputSamples.length);\n  for (i = 0; i<this.NR_OF_SINGLEDELAYS; i++) {\n    // Invert the signal of every even singleDelay\n    singleDelaySamples = DSP.mixSampleBuffers(singleDelaySamples, this.singleDelays[i].process(outputSamples), 2%i === 0, 1);\n  }\n\n  // Apply the volume of the reverb signal\n  for (i = 0; i<singleDelaySamples.length; i++) {\n    singleDelaySamples[i] *= this.mixVolume;\n  }\n \n  // Mix the original signal with the reverb signal\n  outputSamples = DSP.mixSampleBuffers(singleDelaySamples, interleavedSamples, 0, 1);\n\n  // Apply the master volume to the complete signal\n  for (i = 0; i<outputSamples.length; i++) {\n    outputSamples[i] *= this.masterVolume;\n  }\n   \n  return outputSamples;\n};\n\nif (module && typeof module.exports !== 'undefined') {\n  module.exports = {\n    DSP: DSP,\n    DFT: DFT,\n    FFT: FFT,\n    RFFT: RFFT,\n    Sampler: Sampler,\n    Oscillator: Oscillator,\n    ADSR: ADSR,\n    IIRFilter: IIRFilter,\n    IIRFilter2: IIRFilter2,\n    WindowFunction: WindowFunction,\n    sinh: sinh,\n    Biquad: Biquad,\n    GraphicalEq: GraphicalEq,\n    MultiDelay: MultiDelay,\n    SingleDelay: SingleDelay,\n    Reverb: Reverb\n  };\n}"]},"metadata":{},"sourceType":"script"}