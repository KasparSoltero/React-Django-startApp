{"ast":null,"code":"/****************************************************************************\r\n * wav-spectrogram.js\r\n * pcprince.co.uk\r\n * September 2018\r\n *****************************************************************************/\n'use strict';\n/*jslint plusplus: true */\n\nvar dsp = require('dsp.js-browser');\n\nvar decode = require('audio-decode');\n\nvar colormap = require('colormap');\n\nfunction scaleAcrossRange(x, max, min) {\n  return (x - min) / (max - min);\n}\n\nfunction median(values) {\n  values.sort(function (a, b) {\n    return a - b;\n  });\n  var half = Math.floor(values.length / 2);\n\n  if (values.length % 2) {\n    return values[half];\n  }\n\n  return (values[half - 1] + values[half]) / 2.0;\n}\n\nfunction medianFilter(array) {\n  var i, j, values, filteredArray, filteredRow;\n  filteredArray = [];\n\n  for (i = 1; i < array.length - 1; i++) {\n    filteredRow = [];\n\n    for (j = 1; j < array[i].length - 1; j++) {\n      values = [];\n      values.push(array[i - 1][j], array[i][j], array[i + 1][j]);\n      values.push(array[i - 1][j - 1], array[i][j - 1], array[i + 1][j - 1]);\n      values.push(array[i - 1][j + 1], array[i][j + 1], array[i + 1][j + 1]);\n      filteredRow.push(median(values));\n    }\n\n    filteredArray.push(filteredRow);\n  }\n\n  return filteredArray;\n}\n\nfunction drawSpectrogram(params, callback) {\n  var arrayBuffer, canvasElem, cmap, nfft, frameLengthMs, frameStepMs, err, sampleRate, samples, sampleArray, frameLength, frameStep, numFrames, paddedArrayLength, frames, i, maxValue, minValue, spectrumFrames, spectrum, m, n, a, o, p, ctx, specWidth, specHeight, colours;\n  arrayBuffer = params.arrayBuffer;\n  canvasElem = params.canvasElem;\n  cmap = params.cmap;\n  nfft = params.nfft || 512;\n  frameLengthMs = params.frameLengthMs || 0.1;\n  frameStepMs = params.frameStepMs || 0.005;\n  decode(arrayBuffer, (err, audioBuffer) => {\n    if (err || audioBuffer.length === 0) {\n      console.error(\"Loading file failed!\");\n      typeof params.errorHandler === 'function' && params.errorHandler();\n      return;\n    } // Extract samples from audio file\n\n\n    sampleRate = audioBuffer.sampleRate;\n    samples = audioBuffer.getChannelData(0);\n    sampleArray = Array.prototype.slice.call(samples);\n    frameLength = frameLengthMs * sampleRate;\n    frameStep = frameStepMs * sampleRate; // Pad signal to make sure that all frames have equal number of samples without truncating any samples from the original signal\n\n    numFrames = Math.ceil((samples.length - frameLength) / frameStep);\n    paddedArrayLength = numFrames * frameStep + frameLength;\n    sampleArray = sampleArray.concat(new Array(paddedArrayLength - samples.length).fill(0));\n    frames = [];\n\n    for (i = 0; i < numFrames; i++) {\n      let frameStart, frame, j, frameIndex, filteredSample;\n      frameStart = i * frameStep;\n      frame = [];\n\n      for (j = 0; j < frameLength; j++) {\n        frameIndex = j + frameStart; // Apply Hamming filter\n\n        filteredSample = sampleArray[frameIndex] * (0.54 - 0.46 * Math.cos(2.0 * Math.PI * j / (frameLength - 1.0)));\n        frame.push(filteredSample);\n      }\n\n      frames.push(frame);\n    }\n\n    maxValue = 0;\n    minValue = 0;\n    spectrumFrames = [];\n\n    for (m = 0; m < frames.length; m++) {\n      // Apply FFT\n      let fft = new dsp.RFFT(nfft, sampleRate);\n      fft.forward(frames[m]);\n      spectrum = [];\n\n      for (n = 0; n < fft.trans.length; n++) {\n        if (fft.trans[n] != 0) {\n          spectrum.push(Math.log(Math.abs(fft.trans[n])));\n        } else {\n          // Prevent log(0) = -inf\n          spectrum.push(0);\n        }\n      }\n\n      spectrumFrames.push(spectrum);\n    } // Apply median filter\n\n\n    spectrumFrames = medianFilter(spectrumFrames); // Calculate range of filtered values to scale colours between\n\n    for (a = 0; a < spectrumFrames.length; a++) {\n      maxValue = Math.max(Math.max.apply(null, spectrumFrames[a]), maxValue);\n      minValue = Math.min(Math.min.apply(null, spectrumFrames[a]), minValue);\n    }\n\n    ctx = canvasElem.getContext(\"2d\"); // Scale drawing context to fill canvas\n\n    specWidth = spectrumFrames.length;\n    specHeight = spectrumFrames[0].length / 2;\n    ctx.scale(canvasElem.width / specWidth, canvasElem.height / specHeight); // Create colourmap to map spectrum values to colours\n\n    colours = colormap({\n      colormap: cmap,\n      nshades: 255,\n      format: 'hex'\n    });\n\n    for (o = 0; o < spectrumFrames.length; o++) {\n      // Ignore half of spectrogram above Nyquist frequency as it is redundant a reflects values below\n      for (p = spectrumFrames[0].length / 2; p < spectrumFrames[0].length; p++) {\n        // Scale values between 0 - 255 to match colour map\n        let scaledValue = Math.round(255 * scaleAcrossRange(spectrumFrames[o][p], maxValue, minValue));\n        ctx.fillStyle = colours[scaledValue];\n        ctx.fillRect(o, p - spectrumFrames[0].length / 2, 1, 1);\n      }\n    }\n\n    typeof callback === 'function' && callback();\n  });\n}\n\nexports.drawSpectrogram = drawSpectrogram;","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/node_modules/wav-spectrogram/wav-spectrogram.js"],"names":["dsp","require","decode","colormap","scaleAcrossRange","x","max","min","median","values","sort","a","b","half","Math","floor","length","medianFilter","array","i","j","filteredArray","filteredRow","push","drawSpectrogram","params","callback","arrayBuffer","canvasElem","cmap","nfft","frameLengthMs","frameStepMs","err","sampleRate","samples","sampleArray","frameLength","frameStep","numFrames","paddedArrayLength","frames","maxValue","minValue","spectrumFrames","spectrum","m","n","o","p","ctx","specWidth","specHeight","colours","audioBuffer","console","error","errorHandler","getChannelData","Array","prototype","slice","call","ceil","concat","fill","frameStart","frame","frameIndex","filteredSample","cos","PI","fft","RFFT","forward","trans","log","abs","apply","getContext","scale","width","height","nshades","format","scaledValue","round","fillStyle","fillRect","exports"],"mappings":"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","sourcesContent":["/****************************************************************************\r\n * wav-spectrogram.js\r\n * pcprince.co.uk\r\n * September 2018\r\n *****************************************************************************/\r\n\r\n'use strict';\r\n\r\n/*jslint plusplus: true */\r\n\r\nvar dsp = require('dsp.js-browser');\r\nvar decode = require('audio-decode');\r\nvar colormap = require('colormap');\r\n\r\nfunction scaleAcrossRange(x, max, min) {\r\n\r\n    return (x - min) / (max - min);\r\n\r\n}\r\n\r\nfunction median(values) {\r\n\r\n    values.sort(function (a, b) {return a - b; });\r\n\r\n    var half = Math.floor(values.length / 2);\r\n\r\n    if (values.length % 2) {\r\n\r\n        return values[half];\r\n\r\n    }\r\n\r\n    return (values[half - 1] + values[half]) / 2.0;\r\n\r\n}\r\n\r\nfunction medianFilter(array) {\r\n\r\n    var i, j, values, filteredArray, filteredRow;\r\n\r\n    filteredArray = [];\r\n\r\n    for (i = 1; i < array.length - 1; i++) {\r\n\r\n        filteredRow = [];\r\n\r\n        for (j = 1; j < array[i].length - 1; j++) {\r\n\r\n            values = [];\r\n            values.push(array[i - 1][j], array[i][j], array[i + 1][j]);\r\n            values.push(array[i - 1][j - 1], array[i][j - 1], array[i + 1][j - 1]);\r\n            values.push(array[i - 1][j + 1], array[i][j + 1], array[i + 1][j + 1]);\r\n\r\n            filteredRow.push(median(values));\r\n\r\n        }\r\n\r\n        filteredArray.push(filteredRow);\r\n\r\n    }\r\n\r\n    return filteredArray;\r\n\r\n}\r\n\r\nfunction drawSpectrogram(params, callback) {\r\n\r\n    var arrayBuffer, canvasElem, cmap, nfft, frameLengthMs, frameStepMs, err, sampleRate, samples, sampleArray, frameLength, frameStep, numFrames, paddedArrayLength, frames, i, maxValue, minValue, spectrumFrames, spectrum, m, n, a, o, p, ctx, specWidth, specHeight, colours;\r\n\r\n    arrayBuffer = params.arrayBuffer;\r\n    canvasElem = params.canvasElem;\r\n    cmap = params.cmap;\r\n    nfft = params.nfft || 512;\r\n    frameLengthMs = params.frameLengthMs || 0.1;\r\n    frameStepMs = params.frameStepMs || 0.005;\r\n\r\n    decode(arrayBuffer, (err, audioBuffer) => {\r\n\r\n        if(err || audioBuffer.length === 0) {\r\n            console.error(\"Loading file failed!\");\r\n            typeof params.errorHandler === 'function' && params.errorHandler();\r\n            return;\r\n        }\r\n\r\n        // Extract samples from audio file\r\n        sampleRate = audioBuffer.sampleRate;\r\n        samples = audioBuffer.getChannelData(0);\r\n        sampleArray = Array.prototype.slice.call(samples);\r\n\r\n        frameLength = frameLengthMs * sampleRate;\r\n        frameStep = frameStepMs * sampleRate;\r\n\r\n        // Pad signal to make sure that all frames have equal number of samples without truncating any samples from the original signal\r\n        numFrames = Math.ceil((samples.length - frameLength) / frameStep);\r\n        paddedArrayLength = numFrames * frameStep + frameLength;\r\n        sampleArray = sampleArray.concat(new Array(paddedArrayLength - samples.length).fill(0));\r\n\r\n        frames = [];\r\n\r\n        for (i = 0; i < numFrames; i++) {\r\n\r\n            let frameStart, frame, j, frameIndex, filteredSample;\r\n\r\n            frameStart = i * frameStep;\r\n            frame = [];\r\n\r\n            for (j = 0; j < frameLength; j++) {\r\n\r\n                frameIndex = j + frameStart;\r\n\r\n                // Apply Hamming filter\r\n                filteredSample = sampleArray[frameIndex] * (0.54 - (0.46 * Math.cos(2.0 * Math.PI * j / (frameLength - 1.0))));\r\n\r\n                frame.push(filteredSample);\r\n\r\n            }\r\n\r\n            frames.push(frame);\r\n\r\n        }\r\n\r\n        maxValue = 0;\r\n        minValue = 0;\r\n\r\n        spectrumFrames = [];\r\n\r\n        for (m = 0; m < frames.length; m++) {\r\n\r\n            // Apply FFT\r\n            let fft = new dsp.RFFT(nfft, sampleRate);\r\n            fft.forward(frames[m]);\r\n\r\n            spectrum = [];\r\n\r\n            for (n = 0; n < fft.trans.length; n++) {\r\n\r\n                if (fft.trans[n] != 0) {\r\n\r\n                    spectrum.push(Math.log(Math.abs(fft.trans[n])));\r\n\r\n                } else {\r\n\r\n                    // Prevent log(0) = -inf\r\n                    spectrum.push(0);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            spectrumFrames.push(spectrum);\r\n\r\n        }\r\n\r\n        // Apply median filter\r\n        spectrumFrames = medianFilter(spectrumFrames);\r\n\r\n        // Calculate range of filtered values to scale colours between\r\n        for (a = 0; a < spectrumFrames.length; a++) {\r\n\r\n            maxValue = Math.max(Math.max.apply(null, spectrumFrames[a]), maxValue);\r\n            minValue = Math.min(Math.min.apply(null, spectrumFrames[a]), minValue);\r\n\r\n        }\r\n\r\n        ctx = canvasElem.getContext(\"2d\");\r\n\r\n        // Scale drawing context to fill canvas\r\n        specWidth = spectrumFrames.length;\r\n        specHeight = spectrumFrames[0].length / 2;\r\n        ctx.scale(canvasElem.width / specWidth, canvasElem.height / specHeight);\r\n\r\n        // Create colourmap to map spectrum values to colours\r\n        colours = colormap({colormap: cmap, nshades: 255, format: 'hex'});\r\n\r\n        for (o = 0; o < spectrumFrames.length; o++) {\r\n\r\n            // Ignore half of spectrogram above Nyquist frequency as it is redundant a reflects values below\r\n            for (p = spectrumFrames[0].length / 2; p < spectrumFrames[0].length; p++) {\r\n\r\n                // Scale values between 0 - 255 to match colour map\r\n                let scaledValue = Math.round(255 * scaleAcrossRange(spectrumFrames[o][p], maxValue, minValue));\r\n\r\n                ctx.fillStyle = colours[scaledValue];\r\n                ctx.fillRect(o,p - spectrumFrames[0].length / 2,1,1);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        typeof callback === 'function' && callback();\r\n\r\n    });\r\n\r\n}\r\n\r\nexports.drawSpectrogram = drawSpectrogram;"]},"metadata":{},"sourceType":"script"}