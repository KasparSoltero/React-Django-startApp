{"ast":null,"code":"/*\n * Ben Postlethwaite\n * January 2013\n * License MIT\n */\n'use strict';\n\nvar colorScale = require('./colorScale');\n\nvar lerp = require('lerp');\n\nmodule.exports = createColormap;\n\nfunction createColormap(spec) {\n  /*\n   * Default Options\n   */\n  var indicies,\n      rgba,\n      fromrgba,\n      torgba,\n      nsteps,\n      cmap,\n      colormap,\n      format,\n      nshades,\n      colors,\n      alpha,\n      index,\n      i,\n      r = [],\n      g = [],\n      b = [],\n      a = [];\n  if (!spec) spec = {};\n  nshades = (spec.nshades || 72) - 1;\n  format = spec.format || 'hex';\n  colormap = spec.colormap;\n  if (!colormap) colormap = 'jet';\n\n  if (typeof colormap === 'string') {\n    colormap = colormap.toLowerCase();\n\n    if (!colorScale[colormap]) {\n      throw Error(colormap + ' not a supported colorscale');\n    }\n\n    cmap = colorScale[colormap];\n  } else if (Array.isArray(colormap)) {\n    cmap = colormap.slice();\n  } else {\n    throw Error('unsupported colormap option', colormap);\n  }\n\n  if (cmap.length > nshades) {\n    throw new Error(colormap + ' map requires nshades to be at least size ' + cmap.length);\n  }\n\n  if (!Array.isArray(spec.alpha)) {\n    if (typeof spec.alpha === 'number') {\n      alpha = [spec.alpha, spec.alpha];\n    } else {\n      alpha = [1, 1];\n    }\n  } else if (spec.alpha.length !== 2) {\n    alpha = [1, 1];\n  } else {\n    alpha = spec.alpha.slice();\n  } // map index points from 0..1 to 0..n-1\n\n\n  indicies = cmap.map(function (c) {\n    return Math.round(c.index * nshades);\n  }); // Add alpha channel to the map\n\n  alpha[0] = Math.min(Math.max(alpha[0], 0), 1);\n  alpha[1] = Math.min(Math.max(alpha[1], 0), 1);\n  var steps = cmap.map(function (c, i) {\n    var index = cmap[i].index;\n    var rgba = cmap[i].rgb.slice(); // if user supplies their own map use it\n\n    if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {\n      return rgba;\n    }\n\n    rgba[3] = alpha[0] + (alpha[1] - alpha[0]) * index;\n    return rgba;\n  });\n  /*\n   * map increasing linear values between indicies to\n   * linear steps in colorvalues\n   */\n\n  var colors = [];\n\n  for (i = 0; i < indicies.length - 1; ++i) {\n    nsteps = indicies[i + 1] - indicies[i];\n    fromrgba = steps[i];\n    torgba = steps[i + 1];\n\n    for (var j = 0; j < nsteps; j++) {\n      var amt = j / nsteps;\n      colors.push([Math.round(lerp(fromrgba[0], torgba[0], amt)), Math.round(lerp(fromrgba[1], torgba[1], amt)), Math.round(lerp(fromrgba[2], torgba[2], amt)), lerp(fromrgba[3], torgba[3], amt)]);\n    }\n  } //add 1 step as last value\n\n\n  colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]));\n  if (format === 'hex') colors = colors.map(rgb2hex);else if (format === 'rgbaString') colors = colors.map(rgbaStr);else if (format === 'float') colors = colors.map(rgb2float);\n  return colors;\n}\n\n;\n\nfunction rgb2float(rgba) {\n  return [rgba[0] / 255, rgba[1] / 255, rgba[2] / 255, rgba[3]];\n}\n\nfunction rgb2hex(rgba) {\n  var dig,\n      hex = '#';\n\n  for (var i = 0; i < 3; ++i) {\n    dig = rgba[i];\n    dig = dig.toString(16);\n    hex += ('00' + dig).substr(dig.length);\n  }\n\n  return hex;\n}\n\nfunction rgbaStr(rgba) {\n  return 'rgba(' + rgba.join(',') + ')';\n}","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/node_modules/wav-spectrogram/node_modules/colormap/index.js"],"names":["colorScale","require","lerp","module","exports","createColormap","spec","indicies","rgba","fromrgba","torgba","nsteps","cmap","colormap","format","nshades","colors","alpha","index","i","r","g","b","a","toLowerCase","Error","Array","isArray","slice","length","map","c","Math","round","min","max","steps","rgb","j","amt","push","concat","rgb2hex","rgbaStr","rgb2float","dig","hex","toString","substr","join"],"mappings":"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","sourcesContent":["/*\n * Ben Postlethwaite\n * January 2013\n * License MIT\n */\n'use strict';\n\nvar colorScale = require('./colorScale');\nvar lerp = require('lerp')\n\nmodule.exports = createColormap;\n\nfunction createColormap (spec) {\n    /*\n     * Default Options\n     */\n    var indicies, rgba, fromrgba, torgba,\n        nsteps, cmap, colormap, format,\n        nshades, colors, alpha, index, i,\n        r = [],\n        g = [],\n        b = [],\n        a = [];\n\n    if ( !spec ) spec = {};\n\n    nshades = (spec.nshades || 72) - 1;\n    format = spec.format || 'hex';\n\n    colormap = spec.colormap;\n    if (!colormap) colormap = 'jet';\n\n    if (typeof colormap === 'string') {\n        colormap = colormap.toLowerCase();\n\n        if (!colorScale[colormap]) {\n            throw Error(colormap + ' not a supported colorscale');\n        }\n\n        cmap = colorScale[colormap];\n\n    } else if (Array.isArray(colormap)) {\n        cmap = colormap.slice();\n\n    } else {\n        throw Error('unsupported colormap option', colormap);\n    }\n\n    if (cmap.length > nshades) {\n        throw new Error(\n            colormap+' map requires nshades to be at least size '+cmap.length\n        );\n    }\n\n    if (!Array.isArray(spec.alpha)) {\n\n        if (typeof spec.alpha === 'number') {\n            alpha = [spec.alpha, spec.alpha];\n\n        } else {\n            alpha = [1, 1];\n        }\n\n    } else if (spec.alpha.length !== 2) {\n        alpha = [1, 1];\n\n    } else {\n        alpha = spec.alpha.slice();\n    }\n\n    // map index points from 0..1 to 0..n-1\n    indicies = cmap.map(function(c) {\n        return Math.round(c.index * nshades);\n    });\n\n    // Add alpha channel to the map\n    alpha[0] = Math.min(Math.max(alpha[0], 0), 1);\n    alpha[1] = Math.min(Math.max(alpha[1], 0), 1);\n\n    var steps = cmap.map(function(c, i) {\n        var index = cmap[i].index\n\n        var rgba = cmap[i].rgb.slice();\n\n        // if user supplies their own map use it\n        if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {\n            return rgba\n        }\n        rgba[3] = alpha[0] + (alpha[1] - alpha[0])*index;\n\n        return rgba\n    })\n\n\n    /*\n     * map increasing linear values between indicies to\n     * linear steps in colorvalues\n     */\n    var colors = []\n    for (i = 0; i < indicies.length-1; ++i) {\n        nsteps = indicies[i+1] - indicies[i];\n        fromrgba = steps[i];\n        torgba = steps[i+1];\n\n        for (var j = 0; j < nsteps; j++) {\n            var amt = j / nsteps\n            colors.push([\n                Math.round(lerp(fromrgba[0], torgba[0], amt)),\n                Math.round(lerp(fromrgba[1], torgba[1], amt)),\n                Math.round(lerp(fromrgba[2], torgba[2], amt)),\n                lerp(fromrgba[3], torgba[3], amt)\n            ])\n        }\n    }\n\n    //add 1 step as last value\n    colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]))\n\n    if (format === 'hex') colors = colors.map( rgb2hex );\n    else if (format === 'rgbaString') colors = colors.map( rgbaStr );\n    else if (format === 'float') colors = colors.map( rgb2float );\n\n    return colors;\n};\n\nfunction rgb2float (rgba) {\n    return [\n        rgba[0] / 255,\n        rgba[1] / 255,\n        rgba[2] / 255,\n        rgba[3]\n    ]\n}\n\nfunction rgb2hex (rgba) {\n    var dig, hex = '#';\n    for (var i = 0; i < 3; ++i) {\n        dig = rgba[i];\n        dig = dig.toString(16);\n        hex += ('00' + dig).substr( dig.length );\n    }\n    return hex;\n}\n\nfunction rgbaStr (rgba) {\n    return 'rgba(' + rgba.join(',') + ')';\n}\n"]},"metadata":{},"sourceType":"script"}