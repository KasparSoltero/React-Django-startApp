{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'; // import Waveform from 'waveform-react';\n\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Upload_Audio() {\n  _s();\n\n  const [audioFile, setAudioFile] = useState(0);\n  const [audioList, setAudioList] = useState(0);\n\n  function denoiseNewAudios() {\n    //Denoise unprocessed audio files\n    if (audioList) {\n      audioList.data.map(function (audio) {\n        console.log(audio);\n\n        if (!audio.denoisedFile) {\n          console.log('here');\n          const formdata = new FormData();\n          formdata.append('id', audio.id);\n          axios({\n            method: 'post',\n            url: '/add-denoised/',\n            data: formdata\n          }).then(response => console.log(response));\n        } else console.log('already processed');\n      });\n    }\n  }\n\n  function convolveNewAudios() {\n    //Convolve unprocessed audio files\n    if (audioList) {\n      audioList.data.map(function (audio) {\n        console.log('convolving audio file:');\n        console.log(audio); // if (!audio.convolveFile) {\n        //     console.log('here')\n\n        const formdata = new FormData();\n        formdata.append('id', audio.id);\n        axios({\n          method: 'post',\n          url: '/convolve-audio/',\n          data: formdata\n        }).then(response => console.log(response)); // } else console.log('already processed')\n      });\n    }\n  }\n\n  function uploadFilesToDB() {\n    //Send group of files to backend, which then uploads them one by one\n    var uploadData = document.getElementById('uploadFiles').files;\n    var numFiles = uploadData['length'];\n\n    for (let i = 0; i < numFiles; i++) {\n      const formdata = new FormData();\n      formdata.append('title', uploadData[i].name);\n      formdata.append('file', uploadData[i]);\n      axios({\n        method: 'post',\n        url: '/uploadfiles/',\n        data: formdata\n      }).then(response => console.log(response));\n    }\n  }\n\n  function updateAudioList() {\n    axios.get(\"/api/unprocessedaudios/\").then(response => setAudioList(response)).catch(err => console.log(err));\n  }\n\n  function displayAudioList() {\n    if (audioList) {\n      function isDenoised(audio) {\n        console.log(audio);\n\n        if (audio.denoisedFile) {\n          return 'denoised';\n        } else return 'not-denoised';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-list\",\n        children: audioList.data.map(function (audio) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            id: audio.id,\n            class: \"audio-file\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"test\",\n              className: \"audio-title\",\n              children: audio.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"process-stage\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: isDenoised(audio)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this);\n    } else return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"fetching audio list...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-box\",\n    children: [\"....testing file upload! \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateAudioList(),\n        children: \". Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => denoiseNewAudios(),\n        children: \". Denoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => convolveNewAudios(),\n        children: \". Convolve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), displayAudioList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"uploadFiles\",\n      type: \"file\",\n      id: \"uploadFiles\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"uploadbutton\",\n      onClick: () => uploadFilesToDB(),\n      children: \"Upload files to database!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Upload_Audio, \"ialTBhI3CFhdeRFHv1SzsNequTY=\");\n\n_c = Upload_Audio;\nexport default Upload_Audio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload_Audio\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js"],"names":["React","useState","axios","Waveform","Wavesurfer","Upload_Audio","audioFile","setAudioFile","audioList","setAudioList","denoiseNewAudios","data","map","audio","console","log","denoisedFile","formdata","FormData","append","id","method","url","then","response","convolveNewAudios","uploadFilesToDB","uploadData","document","getElementById","files","numFiles","i","name","updateAudioList","get","catch","err","displayAudioList","isDenoised","title"],"mappings":"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","sourcesContent":["import { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'\n\n// import Waveform from 'waveform-react';\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js'\n\nfunction Upload_Audio() {\n\n    const [audioFile, setAudioFile] = useState(0);\n    const [audioList, setAudioList] = useState(0);\n\n    function denoiseNewAudios() {\n        //Denoise unprocessed audio files\n\n        if (audioList) {\n            audioList.data.map(function(audio) {\n                console.log(audio)\n                if (!audio.denoisedFile) {\n                    console.log('here')\n\n                    const formdata =  new FormData();\n                    formdata.append('id', audio.id)\n\n                    axios({\n                        method: 'post',\n                        url: '/add-denoised/',\n                        data: formdata\n                    }).then((response) => console.log(response))\n\n                } else console.log('already processed')\n            })\n        }\n    }\n\n\n    function convolveNewAudios() {\n        //Convolve unprocessed audio files\n\n        if (audioList) {\n            audioList.data.map(function(audio) {\n                console.log('convolving audio file:')\n                console.log(audio)\n                // if (!audio.convolveFile) {\n                //     console.log('here')\n\n                const formdata =  new FormData();\n                formdata.append('id', audio.id)\n\n                axios({\n                    method: 'post',\n                    url: '/convolve-audio/',\n                    data: formdata\n                }).then((response) => console.log(response))\n\n                // } else console.log('already processed')\n            })\n        }\n    }\n\n\n    function uploadFilesToDB() {\n        //Send group of files to backend, which then uploads them one by one\n\n        var uploadData = document.getElementById('uploadFiles').files\n        var numFiles = uploadData['length'];\n\n\n        for (let i = 0; i<numFiles; i++) {\n            const formdata = new FormData();\n            formdata.append('title', uploadData[i].name)\n            formdata.append('file', uploadData[i]);\n            axios({\n                method: 'post',\n                url: '/uploadfiles/',\n                data: formdata,\n            }).then(\n                (response) => console.log(response))\n        }\n\n    }\n\n\n    function updateAudioList() {\n        axios\n        .get(\"/api/unprocessedaudios/\")\n        .then((response) => setAudioList(response))\n        .catch((err) => console.log(err));\n    }\n\n\n    function displayAudioList() {\n        if (audioList) {\n\n            function isDenoised(audio) {\n                console.log(audio)\n                if (audio.denoisedFile) {\n                    return 'denoised'\n                } else return 'not-denoised'\n            }\n            return (\n                <div className='audio-list'>\n                    {audioList.data.map(function(audio) {\n                        return (\n                            <li id={audio.id}\n                                class='audio-file'\n                                >\n                                <div id='test' className='audio-title'>\n                                    {audio.title}\n                                </div>\n                                <div id='process-stage'>\n                                    <div id={isDenoised(audio)}/>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </div>\n            )\n        } else return (\n            <div>fetching audio list...</div>\n        )\n    }\n\n\n    return (\n        <div className='main-box'>\n            ....testing file upload! <br/>\n            \n            <div className='audio-container'>\n                <button onClick={()=>updateAudioList()}>. Refresh</button>\n                <button onClick={()=>denoiseNewAudios()}>. Denoise</button>\n                <button onClick={()=>convolveNewAudios()}>. Convolve</button>\n\n                {displayAudioList()}\n            </div>            \n\n            <input name='uploadFiles' type='file' id='uploadFiles' multiple/>\n            <button className='uploadbutton' onClick={() => uploadFilesToDB()}>\n                Upload files to database!\n            </button>\n\n        </div>\n    )\n}\n\nexport default Upload_Audio;"]},"metadata":{},"sourceType":"module"}