{"ast":null,"code":"var _jsxFileName = \"/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'; // import Waveform from 'waveform-react';\n\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js';\nimport SelectionList from './SelectionList.js';\nimport getCSRF from './getCSRF.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\nfunction Upload_Audio() {\n  _s();\n\n  const [audioList, setAudioList] = useState(0);\n\n  function denoiseNewAudios() {\n    //Denoise unprocessed audio files\n    if (audioList) {\n      audioList.data.map(function (audio) {\n        console.log(audio);\n\n        if (!audio.denoisedFile) {\n          console.log('here');\n          const formdata = new FormData();\n          formdata.append('id', audio.id);\n          axios({\n            method: 'post',\n            url: '/add-denoised/',\n            data: formdata\n          }).then(response => console.log(response));\n        } else console.log('already processed');\n      });\n    }\n  }\n\n  function convolveNewAudios() {\n    //Convolve unprocessed audio files\n    //get all audio files\n    let form = new FormData();\n    form.append('model', 'AudioFile');\n    form.append('return', 'list');\n    form.append('add_related_models', 'audioclip');\n    axios({\n      method: 'post',\n      url: 'get-model/',\n      data: form\n    }).then(response => {\n      let audio_files = response.data[0];\n      let related_audioclips = response.data[1]; //check if each one has been convolved\n\n      for (let i = 0; i < audio_files.length; i++) {\n        if (related_audioclips[i] === 'audio.AudioClip.None') {\n          //convolve if not\n          const form = new FormData();\n          form.append('id', audio_files[i].id);\n          axios({\n            method: 'post',\n            url: '/convolve-audio/',\n            data: form\n          }).then(response => console.log(response));\n        }\n      }\n    });\n  }\n\n  function uploadFilesToDB() {\n    //Send group of files to backend, which then uploads them one by one\n    var uploadData = document.getElementById('file-input').files;\n    var numFiles = uploadData['length'];\n\n    for (let i = 0; i < numFiles; i++) {\n      const form = new FormData();\n      form.append('title', uploadData[i].name);\n      form.append('file', uploadData[i]);\n      axios({\n        method: 'post',\n        url: 'upload-files/',\n        data: form\n      }).then(response => console.log(response));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-audio-container-two\",\n        style: {\n          backgroundColor: 'var(--yellow)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"file-input\",\n          type: \"file\",\n          id: \"file-input\",\n          multiple: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"upload-button\",\n          onClick: () => uploadFilesToDB(),\n          children: \"Upload files to database!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-data-container\",\n      children: /*#__PURE__*/_jsxDEV(SelectionList, {\n        list_type: \"backend-data\",\n        object: ['AudioFile', 'AudioClip'] // selectable={false}\n        // updateSelected={}\n        ,\n        display_audio: true,\n        display_title: true,\n        style_options: {\n          width: '100%',\n          display: 'inline-block',\n          right: '0',\n          top: '40px',\n          bottom: '0px'\n        },\n        display_data: {\n          bool: [{\n            data: 'denoised_filedata',\n            title: 'Denoised'\n          }, {\n            data: 'use_as_ref',\n            title: 'ref',\n            colors: ['rgb(100,0,200)', 'rgb(0,200,100)']\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"process-audios-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-audio-container-two\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"process-audios-button\",\n          onClick: () => denoiseNewAudios(),\n          children: \"Denoise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"process-audios-button\",\n          onClick: () => convolveNewAudios(),\n          children: \"Convolve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Upload_Audio, \"kT0OMqnpQhUg3pb3a+q7xMmls/A=\");\n\n_c = Upload_Audio;\nexport default Upload_Audio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload_Audio\");","map":{"version":3,"sources":["/Users/kaspar/Documents/GitHub/React-Django-startApp/app/frontend/src/Components/Upload_Audio.js"],"names":["React","useState","axios","Waveform","Wavesurfer","SelectionList","getCSRF","defaults","headers","common","Upload_Audio","audioList","setAudioList","denoiseNewAudios","data","map","audio","console","log","denoisedFile","formdata","FormData","append","id","method","url","then","response","convolveNewAudios","form","audio_files","related_audioclips","i","length","uploadFilesToDB","uploadData","document","getElementById","files","numFiles","name","backgroundColor","width","display","right","top","bottom","bool","title","colors"],"mappings":"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","sourcesContent":["import { React, useState } from 'react';\nimport axios from \"axios\";\nimport './Upload_Audio.css'\n\n// import Waveform from 'waveform-react';\nimport Waveform from 'react-audio-waveform';\nimport Wavesurfer from 'wavesurfer.js'\n\nimport SelectionList from './SelectionList.js'\n\nimport getCSRF from './getCSRF.js'\naxios.defaults.headers.common[\"X-CSRFTOKEN\"] = getCSRF();\n\n\nfunction Upload_Audio() {\n\n    const [audioList, setAudioList] = useState(0);\n\n    function denoiseNewAudios() {\n        //Denoise unprocessed audio files\n\n        if (audioList) {\n            audioList.data.map(function(audio) {\n                console.log(audio)\n                if (!audio.denoisedFile) {\n                    console.log('here')\n\n                    const formdata =  new FormData();\n                    formdata.append('id', audio.id)\n\n                    axios({\n                        method: 'post',\n                        url: '/add-denoised/',\n                        data: formdata\n                    }).then((response) => console.log(response))\n\n                } else console.log('already processed')\n            })\n        }\n    }\n\n\n    function convolveNewAudios() {\n        //Convolve unprocessed audio files\n\n        //get all audio files\n        let form = (new FormData)\n        form.append('model', 'AudioFile')\n        form.append('return', 'list')\n        form.append('add_related_models', 'audioclip')\n\n        axios({\n            method: 'post',\n            url: 'get-model/',\n            data: form\n        }).then((response) => {\n            let audio_files = response.data[0]\n            let related_audioclips = response.data[1]\n            //check if each one has been convolved\n            for (let i=0; i<audio_files.length; i++) {\n                if (related_audioclips[i] === 'audio.AudioClip.None') {\n                    //convolve if not\n                    const form =  new FormData();\n                    form.append('id', audio_files[i].id)\n\n                    axios({\n                        method: 'post',\n                        url: '/convolve-audio/',\n                        data: form\n                    }).then((response) => console.log(response))\n                }\n            }\n        })\n    }\n\n\n    function uploadFilesToDB() {\n        //Send group of files to backend, which then uploads them one by one\n\n        var uploadData = document.getElementById('file-input').files\n        var numFiles = uploadData['length'];\n\n        for (let i = 0; i<numFiles; i++) {\n            const form = new FormData();\n            form.append('title', uploadData[i].name)\n            form.append('file', uploadData[i]);\n            axios({\n                method: 'post',\n                url: 'upload-files/',\n                data: form,\n            }).then(\n                (response) => console.log(response))\n        }\n    }\n\n\n    return (\n        <div className='main-box'>\n\n            <div className='upload-button-container'>\n                <div className='upload-audio-container-two' style={{backgroundColor:'var(--yellow)'}}>\n                    <input name='file-input' type='file' id='file-input' multiple/>\n                    <button id='upload-button' onClick={() => uploadFilesToDB()}>\n                        Upload files to database!\n                    </button>\n                </div>\n            </div>\n            <div className='upload-data-container'>\n                <SelectionList \n                    list_type='backend-data' \n                    object={['AudioFile', 'AudioClip']}\n                    // selectable={false}\n                    // updateSelected={}\n                    display_audio={true}\n                    display_title={true}\n                    style_options={{\n                        width: '100%',\n                        display: 'inline-block',\n                        right: '0',\n                        top: '40px',\n                        bottom: '0px',\n                    }}\n                    display_data={{\n                        bool: [{\n                            data: 'denoised_filedata',\n                            title: 'Denoised',\n                        }, {\n                            data: 'use_as_ref',\n                            title: 'ref',\n                            colors: ['rgb(100,0,200)','rgb(0,200,100)']\n                        }],\n                    }}\n                />\n            </div>\n\n            <div className='process-audios-container'>\n                <div className='upload-audio-container-two'>\n                    <button className='process-audios-button' onClick={()=>denoiseNewAudios()}>Denoise</button>\n                    <button className='process-audios-button' onClick={()=>convolveNewAudios()}>Convolve</button>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Upload_Audio;"]},"metadata":{},"sourceType":"module"}